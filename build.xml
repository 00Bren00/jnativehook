<?xml version="1.0" encoding="UTF-8"?>

<project default="all" basedir="." xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks">
	<property file="build.properties"/>
	<property environment="os"/>
	
	<!-- Project Settings -->
	<property name="project.name" value="JNativeHook"/>
	<property name="project.vendor" value="1stleg Development"/>
	<property name="project.version" value="0.9.93"/>
	
	
	<!-- Path Settings -->
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.dist" value="${basedir}/dist"/>
	
	<property name="dir.build" value="${dir.dist}/build"/>
	<property name="dir.classes" value="${dir.build}/classes"/>
	<property name="dir.jars" value="${dir.build}/jars"/>
	<property name="dir.objs" value="${dir.build}/objs"/>
	
	<!-- Compiler Settings -->
	<property name="javac.fork" value="yes"/>
	<property name="javac.target" value="1.6"/>
	
	
	<target name="configure">
		<echo>Checking environment sanity...</echo>
		<!-- Try to locate the include folder for java headers -->
		<condition property="javac.include" value="${java.home}/../include">
			<and>
				<not>
					<isset property="javac.include"/>
				</not>
				
				<available file="${java.home}/../include" type="dir"/>
			</and>
		</condition>
		<condition property="javac.include" value="${os.JAVA_HOME}/include">
			<and>
				<not>
					<isset property="javac.include"/>
				</not>
				
				<available file="${os.JAVA_HOME}/include" type="dir"/>
			</and>
		</condition>
		<fail unless="javac.include" message="Could not determine javac.include location.  Please set your JAVA_HOME environment variable or manually specify your javac.include location."/>
		<echo>Found java include location: ${javac.include}</echo>
		
		
		
		<!-- Figure out of the system arch is supported -->
		<condition property="gcc.arch" value="i586">
			<and>
				<not>
					<isset property="gcc.arch"/>
				</not>
				
				<or>
					<os arch="x86"/>
					<os arch="i386"/>
					<os arch="i486"/>
					<os arch="i586"/>
					<os arch="i686"/>
				</or>
			</and>
		</condition>
		<condition property="gcc.arch" value="k8">
			<and>
				<not>
					<isset property="gcc.arch"/>
				</not>
				
				<or>
					<os arch="x86_64"/>
					<os arch="amd64"/>
					<os arch="k8"/>
				</or>
			</and>
		</condition>
		<fail unless="gcc.arch" message="The ${os.arch} architecture is not currently supported."/>
		<echo>Compatible system architecture: ${gcc.arch}</echo>
		
		<!-- Set 32 or 64 bit flag -->
		<condition property="gcc.arch.model" value="${sun.arch.data.model}">
				<not>
					<isset property="gcc.arch.model"/>
				</not>
		</condition>
		<echo>System architecture data model: ${gcc.arch.model} bit</echo>
		<!-- echo>${sun.cpu.endian}</echo -->
		
		
		<!-- Set the gcc debug flag ONLY IF debug is true, unset implies false -->
		<condition property="gcc.debug" value="-DDEBUG">
			<istrue value="${project.debug}"/>
		</condition>
		<echo>Debug Mode: ${project.debug} ${gcc.debug}</echo>
		
		<!-- Determin the os family, unset implies false -->
		<condition property="gcc.os.family.windows" value="yes">
			<os family="winnt"/>
		</condition>
		<condition property="gcc.os.family.unix" value="yes">
			<os family="unix"/>
		</condition>
		<condition property="gcc.os.family.mac" value="yes">
			<os family="mac"/>
		</condition>
	</target>
	
	<target name="clean" description="prepares the environment">
		<echo>Cleaning old build structure...</echo>
		<delete includeemptydirs="true">
			<fileset dir="${dir.dist}" includes="**/*"/>
		</delete>
		
		
		<echo>Creating build folders...</echo>
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.classes}"/>
		<mkdir dir="${dir.jars}"/>
		<mkdir dir="${dir.objs}"/>
		
		<!-- Create Linux Branch -->
		<mkdir dir="${dir.dist}/Linux/x86_32"/>
		<mkdir dir="${dir.dist}/Linux/x86_64"/>
		
		<!-- Create OSX Branch -->
		<mkdir dir="${dir.dist}/OSX"/>
		
		<!-- Create Windows Branch -->
		<mkdir dir="${dir.dist}/Windows/x86_32"/>
		
		<path id="classpath">
			<pathelement location="${dir.classes}"/>
			<!--
			<fileset dir="${project.lib}">
				<include name="*.jar"/>
			</fileset>
			-->
		</path>
	</target>
	
	
	<target name="compile" depends="clean,configure" description="Compiles the classes">
		<echo>Compiling java source...</echo>
		<javac srcdir="${dir.src}"
			destdir="${dir.classes}"
			classpathref="classpath"
			debug="${project.debug}"
			optimize="${javac.optimize}"
			deprecation="false"
			source="${javac.target}"
			target="${javac.target}"
		/>
		
		<echo>Compiling C source...</echo>
		<cpptasks:cc
			multithreaded="true"
			optimize="speed"
			
			outtype="shared"
			link="shared"
			
			outfile="${dir.dist}/JNativeHook_Keyboard"
			objdir="${dir.objs}"
			
			debug="${project.debug}"
			warnings="diagnostic"
		>
			<compiler name="gcc">
				<includepath location="${dir.src}/org/jnativehook/keyboard/c_source"/>
				<includepath location="${javac.include}"/>
				<includepath location="${javac.include}/linux"/>
				
				<fileset dir="${dir.src}/org/jnativehook/keyboard/c_source/linux">
					<include name="*.c"/>
				</fileset>
				
				<compilerarg value="-m${gcc.arch.model}"/>
				<compilerarg value="-march=${gcc.arch}"/>
				<compilerarg value="-fPIC"/>
				<compilerarg value="-Wall"/>
				<compilerarg value="-O3"/>
				<compilerarg value="-fno-strict-aliasing"/>
				<compilerarg value="-lX11" if="gcc.os.family.unix"/>
				<compilerarg value="-DDEBUG" if="gcc.debug"/>
				
				<!-- compilerarg value="-v"/ -->
			</compiler>
			
			<linker name="gcc">
				<linkerarg value="-m${gcc.arch.model}"/>
				<linkerarg value="-march=${gcc.arch}"/>
				<linkerarg value="-fPIC"/>
				<linkerarg value="-Wall"/>
				<linkerarg value="-O3"/>
				<linkerarg value="-fno-strict-aliasing"/>
				<linkerarg value="-lX11" if="gcc.os.family.unix"/>
				
				<!-- linkerarg value="-v"/ -->
			</linker>
			
			<versioninfo
				companyname="${project.vendor}"
				productname="${project.name}"
				productversion="${project.version}"
			/>
		</cpptasks:cc>
	</target>
	
	
	<target name="jar" depends="compile" description="Builds the required jar binaries">
		<echo>Creating JNativeHook.jar...</echo>
		<jar jarfile="${dir.jars}/JNativeHook.jar" basedir="${dir.classes}">
			<include name="org/jnativehook/keyboard/**"/>
			<include name="org/jnativehook/**"/>
			<!-- <exclude name="org/jnativehook/Driver.class"/> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.Driver"/>
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${project.name} Library"/>
					<attribute name="Implementation-Version" value="${project.version}"/> 
					<attribute name="Implementation-Vendor" value="${project.vendor}"/>
				</section>
			</manifest>
		</jar>
		
		
		<!--
		<echo>Creating client init script.</echo>
		<copy overwrite="true" file="${project.src}/org/dotnative/globalkeylistener/cpp_source/Linux/x86_32/libGlobalKeyListener.so" todir="${dir.key}"/>
		-->
	</target>
	
	
	<target name="package" depends="jar" description="Builds the server binaries">
		<!-- Copy Files To Dist Locations -->
		<echo>Copying files...</echo>
		<copy 
			overwrite="true" 
			file="${dir.jars}/JNativeHook.jar" 
			todir="${dir.dist}"
		/>
	</target>
	
	
	<target name="all" depends="package" description="builds all targets">
	</target>
</project>
