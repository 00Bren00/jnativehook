<?xml version="1.0" encoding="UTF-8"?>

<!--
	JNativeHook: Global keyboard and mouse hooking for Java.
	Copyright (C) 2006-2013 Alexander Barker.  All Rights Received.
	http://code.google.com/p/jnativehook/

	JNativeHook is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published
	by the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	JNativeHook is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="JNativeHook" default="all" basedir=".">
	<!-- Project Settings -->
	<property file="build.num" />

	<property name="ant.project.vendor" 	value="Alexander Barker (alex@1stleg.com)" />
	<property name="ant.project.version"	value="${build.major}.${build.minor}.${build.revision}" />


    <property environment="env" />

	<!-- Path Settings -->
	<property name="dir.src"	value="${basedir}${file.separator}src" />
	<property name="dir.doc"	value="${basedir}${file.separator}doc" />
	<property name="dir.jar"	value="${basedir}${file.separator}jar" />
	<property name="dir.dist"	value="${basedir}${file.separator}dist" />
	<property name="dir.lib"	value="${basedir}${file.separator}lib" />
	<property name="dir.bin"	value="${basedir}${file.separator}bin" />

	<!-- Class Path Settings -->
	<!-- NOTE Gentoo requires `CLASSPATH="$(java-config -p ant-junit,junit-4)" ant test` -->
	<path id="project.class.path">
		<pathelement location="${dir.bin}/class/java" />
		<pathelement location="${dir.bin}/class/test" />
		<pathelement location="${dir.jar}" />
		<pathelement location="${dir.lib}" />

		<pathelement path="${java.class.path}" />
	</path>

	<target name="clean" description="Removes generated bytecode and object files.">
		<echo>Cleaning build structure...</echo>

		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="${dir.bin}" includes="**/*" />
			<fileset file="build.properties" />
		</delete>
	</target>


	<target name="distclean" depends="clean" description="Removes all items generated by the build system.">
		<echo>Cleaning all build related items...</echo>

		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="${dir.bin}" />
			<fileset dir="${dir.dist}" />
			<fileset dir="${dir.doc}" />
			<fileset dir="${dir.jar}" />
			<fileset dir="${dir.lib}" />

            <!-- Brilliant!
            <fileset dir="${dir.src}/jnitasks" />
            <fileset dir="${dir.src}/libuiohook" />
            -->

			<fileset file="${dir.src}/jni/include/org_jnativehook_GlobalScreen.h" />
		</delete>
	</target>


	<target name="init" description="Initialize local build environment.">
        <!-- property name="build.compiler" value="modern" />
        <property name="ant.build.javac.source" value="1.5" />
        <property name="ant.build.javac.target" value="1.5" /-->


        <echo>Initializing local build environment...</echo>

        <mkdir dir="${dir.bin}" />

        <fail message="Could not determine ${ant.project.name} version.  Please check the build.num file.">
            <condition>
                <not>
                    <and>
                        <isset property="build.major" />
                        <isset property="build.minor" />
                        <isset property="build.revision" />
                    </and>
                </not>
            </condition>
        </fail>
        <echo level="info">${ant.project.name} version ${ant.project.version}</echo>

        <!-- Determine if jnitasks source should be downloaded. -->
        <available file="${dir.src}/jnitasks" property="project.check.jnitasks" />

        <!-- Determine if libuiohook source should be downloaded. -->
		<available file="${dir.src}/libuiohook" property="project.check.libuiohook" />

    	<!-- Determine if the project has been configured. -->
		<available file="build.properties" property="project.check.configured" />
		<property file="build.properties" />

		<!-- Determine the operating system -->
		<condition property="native.os" value="freebsd">
			<os family="unix" name="FreeBSD" />
		</condition>
		<condition property="native.os" value="openbsd">
			<os family="unix" name="OpenBSD" />
		</condition>
		<condition property="native.os" value="osx">
			<and>
				<os family="mac" />
				<os family="unix" />
			</and>
		</condition>
		<condition property="native.os" value="solaris">
			<or>
				<os family="unix" name="Solaris" />
				<os family="unix" name="SunOS" />
			</or>
		</condition>
		<condition property="native.os" value="linux">
			<os family="unix" name="Linux" />
		</condition>
		<condition property="native.os" value="windows">
			<os family="winnt" />
		</condition>


		<!-- Set the system arch name used for orginizing native libraries -->
		<condition property="native.arch" value="x86">
			<or>
				<os arch="x86" />
				<os arch="i386" />
				<os arch="i486" />
				<os arch="i586" />
				<os arch="i686" />
			</or>
		</condition>
		<condition property="native.arch" value="x86_64">
			<or>
				<os arch="x86-64" />
				<os arch="x86_64" />
				<os arch="amd64" />
				<os arch="k8" />
			</or>
		</condition>
		<condition property="native.arch" value="ppc">
			<or>
				<os arch="ppc" />
				<os arch="PowerPC" />
			</or>
		</condition>
		<condition property="native.arch" value="ppc64">
			<or>
				<os arch="ppc64" />
				<os arch="PowerPC64" />
			</or>
		</condition>
		<property name="native.arch" value="${os.arch}" />
		<!-- TODO Testing Needed
		<condition property="native.arch" value="sparc">
			<os arch="sparc" />
		</condition>
		-->



		<!-- Set system specific library name
		<condition property="native.executable" value="lib${ant.project.name}.dylib">
			<istrue value="${native.os.isApple}" />
		</condition>
		<condition property="native.executable" value="lib${ant.project.name}.so">
			<istrue value="${native.os.isUnix}" />
		</condition>
		<condition property="native.executable" value="${ant.project.name}.dll">
			<istrue value="${native.os.isWindows}" />
		</condition>
		-->
	</target>


    <target name="download-jnitasks" depends="init" unless="project.check.jnitasks" description="Download and initialize the native library.">
        <echo>Downloading JNITasks source...</echo>

        <mkdir dir="${dir.src}/jnitasks" />
        <get src="https://github.com/kwhat/jnitasks/archive/master.zip" dest="${dir.bin}/jnitasks-master.zip" verbose="true" />
        <unzip src="${dir.bin}/jnitasks-master.zip" dest="${dir.src}/jnitasks">
            <mapper type="glob" from="jnitasks-master/*" to="*"/>
        </unzip>
    </target>

    <target name="compile-jnitasks" depends="download-jnitasks" description="Download and initialize the native library.">
        <echo>Compiling JNITasks source...</echo>
        <ant antfile="${dir.src}/jnitasks/build.xml" dir="${dir.src}/jnitasks" target="compile">
            <property name="dir.bin" value="${dir.bin}/jnitasks" />
            <property name="dir.src" value="${dir.src}/jnitasks/src" />
        </ant>

        <typedef file="${dir.src}/jnitasks/src/org/jnitasks/antlib.xml" classpath="${dir.bin}/jnitasks" />
    </target>


	<target name="download-libuiohook" depends="init" unless="project.check.libuiohook" description="Download and initialize the native library.">
        <echo>Downloading libUIOHook source...</echo>
        <mkdir dir="${dir.src}/libuiohook" />
        <get src="https://github.com/kwhat/libuiohook/archive/master.zip" dest="${dir.bin}/libuiohook-master.zip" verbose="true" />
        <unzip src="${dir.bin}/libuiohook-master.zip" dest="${dir.src}/libuiohook">
            <mapper type="glob" from="libuiohook-master/*" to="*"/>
        </unzip>
	</target>

    <target name="configure-libuiohook" depends="compile-jnitasks,download-libuiohook" description="Download and initialize the native library.">
        <echo>Bootstrapping libUIOHook...</echo>
        <mkdir dir="${dir.bin}/libuiohook" />

        <autoreconf dir="${dir.src}/libuiohook" force="true" install="true">
            <include path="/opt/local/share/aclocal" os="darwin" />
        </autoreconf>

        <echo>Configuring libUIOHook source...</echo>
        <configure dir="${dir.bin}/libuiohook" path="${dir.src}/libuiohook" prefix="${dir.bin}">
            <enable>debug</enable>
            <enable>static</enable>
            <with>pic</with>
        </configure>
    </target>

    <target name="compile-libuiohook" depends="configure-libuiohook" description="Download and initialize the native library.">
        <echo>Compiling libUIOHook source...</echo>

        <make dir="${dir.bin}/libuiohook" jobs="auto" target="install" />
    </target>


	<target name="configure" depends="" unless="project.check.configured" description="Automatically generates a properties file for your environment.">
		<echo>Checking environment sanity...</echo>

		<!-- Set the project flags to their default values -->
		<property name="project.debug" value="false" />
		<echo level="info">Build debug: ${project.debug}</echo>

		<condition property="project.optimize" value="true" else="false">
			<not>
				<istrue value="${project.debug}" />
			</not>
		</condition>
		<echo level="info">Build optimized: ${project.optimize}</echo>

		<condition property="project.strip" value="true" else="false">
			<not>
				<istrue value="${project.debug}" />
			</not>
		</condition>
		<echo level="info">Build stripped: ${project.strip}</echo>



		<!-- Try to locate the rt.jar location for java.bootclasspath -->
		<condition property="java.bootclasspath" value="${java.home}${file.separator}lib${file.separator}rt.jar">
			<available file="${java.home}${file.separator}lib${file.separator}rt.jar" type="file" />
		</condition>
		<condition property="java.bootclasspath" value="${java.home}${file.separator}bundle${file.separator}Classes${file.separator}classes.jar">
			<available file="${java.home}${file.separator}bundle${file.separator}Classes${file.separator}classes.jar" type="file" />
		</condition>

		<fail message="Could not determine java.bootclasspath location.  Please set your JAVA_HOME environment variable or manually set java.bootclasspath to the location of your rt.jar file in the build.properties file.">
			<condition>
				<not>
					<or>
						<isset property="java.bootclasspath" />
						<available file="${java.bootclasspath}" type="file" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Java lib location: ${java.bootclasspath}</echo>


		<!-- Try to locate the env path varaible -->
		<condition property="native.path" value="${env.PATH}">
			<isset property="env.PATH" />
		</condition>
		<condition property="native.path" value="${env.Path}">
			<isset property="env.Path" />
		</condition>
		<condition property="native.path" value="${env.path}">
			<isset property="env.path" />
		</condition>

		<fail message="Could not determine environment path.  Please set your PATH environment variable or manually set native.path to a '${path.separator}' seperated list of folders to search for native applications.">
			<condition>
				<not>
					<isset property="native.path" />
				</not>
			</condition>
		</fail>
		<echo level="info">Found environment path: ${native.path}</echo>


		<!-- Set the java compiler -->
		<property name="java.cc" value="modern" />
		<echo level="info">Java compiler: ${java.cc}</echo>

		<!-- Set the java compatible version ${ant.java.version} -->
		<property name="java.target" value="1.5" />
		<echo level="info">Java compatibility: ${java.target}</echo>





		<!-- Create property file for the descovered values -->
		<propertyfile file="build.properties" comment="auto-generated by ant configure">
			<entry key="java.cc"				value="${java.cc}" />
			<entry key="java.target"			value="${java.target}" />
		</propertyfile>
	</target>


	<target name="compile" depends="compile-java,compile-jni" description="Compiles both Java and C source files.">
	</target>


	<target name="compile-java" depends="configure" description="Compiles Java source files.">
		<echo>Compiling Java source...</echo>
		<mkdir dir="${dir.bin}/class/java" />

		<javac
			destdir="${dir.bin}/class/java"
			bootclasspath="${java.bootclasspath}"
			debug="${project.debug}"
			debuglevel="lines,vars,source"
			optimize="${project.optimize}"
			deprecation="false"
			includeantruntime="false"
			listfiles="true"
			compiler="${java.cc}"
			source="${java.target}"
			target="${java.target}"
			verbose="false"
		>
			<src path="${dir.src}/java" />

			<classpath refid="project.class.path" />
			<bootclasspath path="${java.bootclasspath}" />
		</javac>
	</target>



	<target name="compile-jni" depends="compile-libuiohook,compile-java" description="Compiles JNI source files.">
		<echo>Creating JNI Headers...</echo>
		<javah destdir="${dir.src}/jni/include" verbose="true">
			<class name="org.jnativehook.GlobalScreen"/>
			<classpath refid="project.class.path" />
			<bootclasspath path="${java.bootclasspath}" />
		</javah>


		<!-- Call pkg-config to determin what libraries to link against. -->
		<exec executable="pkg-config" failonerror="true" outputproperty="native.ld.libs" osfamily="unix">
			<env key="PKG_CONFIG_PATH" value="${dir.bin}/lib/pc" />

			<arg value="--libs" />
			<arg value="uiohook" />
		</exec>
		<!-- FIXME Temporary hack for Windows because automake installs dll's
		to ${prefix}/bin instead of ${prefix}/lib and the nativehook dll is not
		needed for linking, only its dependencies are. -->
		<property name="native.ld.libs" value="" />


		<echo>Compiling C source...</echo>
		<!-- Create required directories for compiling -->
		<mkdir dir="${dir.bin}/obj/jni" />

		<!-- FIXME This is an ugly hack that should be replaced with custom tasks -->
		<fileset dir="${dir.src}/jni" id="file.src">
			<include name="**/*.c" />
		</fileset>

		<pathconvert pathsep="${line.separator}" property="file.src.txt" refid="file.src" />
		<echo>Applying ${native.cc} on the following files:</echo>
		<echo>${file.src.txt}</echo>



        <!-- Set compiler debug flags -->
        <condition property="native.cc.flags.debug" value="-g -DDEBUG" else="-Werror -Wno-unused-parameter -Wno-unused-variable">
            <istrue value="${project.debug}" />
        </condition>

        <!-- Set the compiler flags. -->
        <condition property="native.cc.flags" value="${env.CFLAGS}" else="-O2 -pipe -DDEBUG">
            <isset property="${env.CFLAGS}" />
        </condition>


        <!--
        TODO Test without  -fno-strict-aliasing

        Darwin
        -F/System/Library/Frameworks/ApplicationServices.framework/Frameworks
        -I${dir.bin}/obj/native/include -I${dir.src}/jni/include -I/usr/lib -I${java.include} -I${java.include}/darwin
        -c ${native.cc.flags} -fPIC -Wall -Wextra ${native.cc.flags.debug} ${native.cc.includes}
        -dynamiclib -Wl,-dead_strip,-dead_strip_dylibs,-install_name,${native.executable}.${build.major}.${build.minor},-compatibility_version,${build.major}.${build.minor},-current_version,${build.major}.${build.minor}.${build.revision}

        Unix
        -c ${native.cc.flags} -fPIC -Wall -Wextra ${native.cc.flags.debug} ${native.cc.includes}
        -I${dir.bin}/include -I${dir.src}/jni/include -I${java.include} -I${java.include}/linux
        -shared -Wl,- -as-needed

        Windows
        -I${dir.bin}/include -I${dir.src}/jni/include -I${java.include} -I${java.include}/win32
        -c ${native.cc.flags} -Wall -Wextra ${native.cc.flags.debug} ${native.cc.includes}
        -shared -Wl,- -as-needed,- -kill-at
        -->
        <property name="java.include" value="/home/kwhat/.gentoo/java-config-2/current-user-vm/include" />

		<!-- Execute the native compiler on the soruce files -->
		<parallel threadsPerProcessor="4" failonany="true">
			<apply executable="gcc" failonerror="true" verbose="true" ignoremissing="false">
				<fileset refid="file.src" />

				<arg line="-c ${native.cc.flags} -fPIC -Wall -Wextra ${native.cc.flags.debug} -I${dir.bin}/include -I${dir.src}/jni/include -I${java.include} -I${java.include}/linux" />
				<srcfile />
				<arg line="-o" />
				<targetfile />

				<mapper type="glob" from="*.c" to="${dir.bin}/obj/jni/*.o" />
			</apply>
		</parallel>

		<echo>Linking C objects...</echo>
		<!-- Create required directory for linking -->
		<mkdir dir="${dir.lib}/${native.os}/${native.arch}" />

		<!-- Create a couple of filesets for obj and archive files. -->
		<!-- NOTE The order of these files is critical! -->
		<fileset dir="${dir.bin}" id="file.obj">
			<include name="obj/jni/**/*.o" />
		</fileset>
		<fileset dir="${dir.bin}" id="file.ar">
			<include name="lib/*.a" />
			<include name="lib/*.dll.a" />
		</fileset>

		<!-- Convert the fileset to something that can be printed for the user -->
		<!-- TODO This should be replaced by a custom task -->
		<pathconvert pathsep="${line.separator}" property="file.obj.txt">
			<fileset refid="file.obj" />
			<fileset refid="file.ar" />
		</pathconvert>

		<echo>Applying ${native.ld} on the following files:</echo>
		<echo>${file.obj.txt}</echo>

		<!-- Execute the native linker on the object files -->
		<apply executable="gcc" failonerror="true" verbose="true" ignoremissing="false" parallel="true">
			<fileset refid="file.obj" />
			<fileset refid="file.ar" />

			<arg line="-shared -Wl,--as-needed" />
			<srcfile />
			<arg line="${native.ld.libs}" />
			<arg line="-o" />
			<arg file="${dir.lib}/${native.os}/${native.arch}/lib${ant.project.name}.so" />
		</apply>
	</target>


	<target name="test" depends="configure" description="Compile and perform JUnit tests.">
		<echo>Compiling JUnit source...</echo>
		<mkdir dir="${dir.bin}/class/test" />

		<javac
			destdir="${dir.bin}/class/test"
			debug="${project.debug}"
			debuglevel="lines,vars,source"
			optimize="${project.optimize}"
			deprecation="false"
			includeantruntime="false"
			listfiles="true"
			compiler="${java.cc}"
			source="${java.target}"
			target="${java.target}"
			verbose="false"
		>
			<src path="${dir.src}/test" />

			<classpath refid="project.class.path" />
			<bootclasspath path="${java.bootclasspath}" />

			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<echo>Performing JUnit tests...</echo>
		<junit fork="true" printsummary="true" haltonerror="true">
			<jvmarg value="-Djava.library.path=${dir.lib}/${native.os}/${native.arch}" />

			<classpath refid="project.class.path" />

			<formatter type="brief" usefile="false" />
			<!-- test name="TestExample" / -->
			<batchtest> <!-- todir="${reports.tests}" -->
				<fileset dir="${dir.src}/test">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>


	<target name="jar" description="Creates the jar library.">
		<echo>Copying libs...</echo>
		<mkdir dir="${dir.bin}/class/java/org/jnativehook/lib" />
		<copy overwrite="true" todir="${dir.bin}/class/java/org/jnativehook/lib">
			<fileset dir="${dir.lib}" includes="**/*" />
		</copy>

		<echo>Creating ${ant.project.name}.jar...</echo>
		<mkdir dir="${dir.jar}" />
		<jar jarfile="${dir.jar}/${ant.project.name}.jar" basedir="${dir.bin}/class/java">
			<include name="org/jnativehook/**" />
			<!-- <exclude name="org/jnativehook/example/NativeHookDemo.class" /> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.example.NativeHookDemo" />
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${ant.project.name} Library" />
					<attribute name="Implementation-Version" value="${ant.project.version}" />
					<attribute name="Implementation-Vendor" value="${ant.project.vendor}" />
				</section>
			</manifest>
		</jar>
	</target>


	<target name="run" depends="configure" description="Execute the bundled example.">
		<java classname="org.jnativehook.example.NativeHookDemo" fork="true" failonerror="true">
			<jvmarg value="-Djava.library.path=${dir.lib}/${native.os}/${native.arch}" />
			<classpath>
				<pathelement location="${dir.jar}/${ant.project.name}.jar" />
				<pathelement path="${dir.bin}/class/java" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>


	<target name="javadoc" description="Generates javadoc api documentation.">
		<echo level="info">Generating API Documenation...</echo>
		<mkdir dir="${dir.doc}" />

		<javadoc destdir="${dir.doc}" windowtitle="${ant.project.name}" author="true" version="true" use="true">
			<packageset dir="${dir.src}/java" defaultexcludes="yes">
				<include name="org/jnativehook/**" />
				<exclude name="org/jnativehook/example/**" />
			</packageset>

			<doctitle><![CDATA[<h1>${ant.project.name} API Documentation</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2006-2013 ${project.vendor}. All Rights Received.</i>]]></bottom>

			<!--
			<tag name="to.do" scope="all" description="To Do:" />
			<tag name="fix.me" scope="all" description="Fix Needed:" />
			-->

			<link href="http://download.oracle.com/javase/1.5.0/docs/api/" />
		</javadoc>
	</target>


	<target name="package" depends="jar,javadoc" description="Creates zip files for distribution.">
		<!-- Copy Files To Dist Locations -->
		<echo>Creating Distribution Archive...</echo>
		<mkdir dir="${dir.dist}" />

		<zip destfile="${dir.dist}/${ant.project.name}-${ant.project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.jar}" prefix="${ant.project.name}/jar">
				<include name="*.jar" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${ant.project.name}">
				<include name="license*.txt" />
				<include name="readme.txt" />
			</zipfileset>
		</zip>

		<zip destfile="${dir.dist}/${ant.project.name}-doc-${ant.project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.doc}" prefix="${ant.project.name}/doc">
				<exclude name="**/.*" />
			</zipfileset>
		</zip>

		<zip destfile="${dir.dist}/${ant.project.name}-src-${ant.project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${basedir}" prefix="${ant.project.name}">
				<exclude name="**/.*" />

				<include name="*.txt" />
				<include name="build.*" />
				<exclude name="build.properties*" />
			</zipfileset>

			<zipfileset dir="${dir.src}" prefix="${ant.project.name}/src">
				<exclude name="**/.*" />

				<exclude name="native/jni/org_jnativehook_GlobalScreen.h" />
			</zipfileset>
		</zip>

		<!-- Increment and write out the build numbers
		<propertyfile file="build.num" comment="Build Number for ANT. Do not edit!">
			<entry key="build.major" type="int" value="${build.major}" />
			<entry key="build.minor" type="int" value="${build.minor}" />
			<entry key="build.revision" type="int" value="1" operation="+" />
		</propertyfile>
		 -->
	</target>


	<target name="all" depends="compile,jar" description="Compile all source files and create the jar library.">
	</target>
</project>
