<?xml version="1.0" encoding="UTF-8"?>

<project name="JNativeHook" default="all" basedir=".">
	<property environment="os"/>
	<property environment="env"/>
	<property file="build.properties"/>
	
	<!-- Project Settings -->
	<buildnumber file="build.num"/>
	<property name="project.name"		value="${ant.project.name}"/>
	<property name="project.vendor" 	value="Alexander Barker"/>
	<property name="project.version"	value="1.0.${build.number}-Beta"/>
	
	<!-- Path Settings -->
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.doc" value="${basedir}/doc"/>
	<property name="dir.jar" value="${basedir}/jar"/>
	<property name="dir.dist" value="${basedir}/dist"/>
	
	<property name="dir.lib" value="${dir.src}/org/jnativehook/lib"/>
	<property name="dir.bin" value="${basedir}/bin"/>
	<property name="dir.obj" value="${basedir}/bin/obj"/>
	
	
	<target name="clean" description="prepares the environment">
		<echo>Cleaning old build structure...</echo>
		
		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="${dir.jar}" includes="**/*"/>
			<fileset dir="${dir.bin}" includes="**/*"/>
			<fileset dir="${dir.dist}" includes="**/*"/>
			<fileset file="build.properties"/>
		</delete>
	</target>
	
	<target name="configure" description="Automatically generates a configuration for this enviroment.">
		<echo>Checking environment sanity...</echo>
		
		<!-- Set the project debug flag -->
		<condition property="project.debug" value="true" else="false">
			<and>
				<isset property="project.debug"/>
				<or>
					<equals arg1="${project.debug}" arg2="true" casesensitive="false" trim="true"/>
					<equals arg1="${project.debug}" arg2="yes" casesensitive="false" trim="true"/>
				</or>
			</and>
		</condition>
		
		<!-- Check for debug -->
		<condition property="project.isDebug" value="true">
			<istrue value="${project.debug}"/>
		</condition>
		<echo level="info">Build Debug: ${project.debug}</echo>
		
		
		<!-- Set the project static flag -->
		<condition property="project.static" value="true" else="false">
			<and>
				<isset property="project.static"/>
				<or>
					<equals arg1="${project.static}" arg2="true" casesensitive="false" trim="true"/>
					<equals arg1="${project.static}" arg2="yes" casesensitive="false" trim="true"/>
				</or>
			</and>
		</condition>
		
		<!-- Check for static -->
		<condition property="project.isStatic" value="true">
			<istrue value="${project.static}"/>
		</condition>
		<echo level="info">Build Static: ${project.static}</echo>
		
		
		<!-- Try to locate the include folder for java headers -->
		<condition property="java.include" value="${java.home}${file.separator}include">
			<available file="${java.home}/include" type="dir"/>
		</condition>
		<condition property="java.include" value="${os.JAVA_HOME}${file.separator}include">
			<available file="${os.JAVA_HOME}/include" type="dir"/>
		</condition>
		<condition property="java.include" value="${java.home}${file.separator}..${file.separator}include">
			<available file="${java.home}/../include" type="dir"/>
		</condition>
		
		<fail message="Could not determine java.include location.  Please set your JAVA_HOME environment variable or manually set java.include to the location of your java header files in the build.properties file.">
			<condition>
				<not>
					<or>
						<isset property="java.include"/>
						<available file="${java.include}" type="dir"/>
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found java include location: ${java.include}</echo>
		
		
		<!-- Try to locate the env path varaible -->
		<condition property="native.path" value="${env.PATH}">
			<isset property="env.PATH"/>
		</condition>
		<condition property="native.path" value="${env.Path}">
			<isset property="env.Path"/>
		</condition>
		<condition property="native.path" value="${env.path}">
			<isset property="env.path"/>
		</condition>
		
		<fail message="Could not determine environment path.  Please set your PATH environment variable or manually set native.path to a '${path.separator}' seperated list of folders to search for native applications.">
			<condition>
				<not>
					<isset property="native.path"/>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Path: ${native.path}</echo>
		
		
		<!-- Figure out of the system arch is supported -->
		<condition property="native.arch" value="i586">
			<or>
				<os arch="x86"/>
				<os arch="i386"/>
				<os arch="i486"/>
				<os arch="i586"/>
				<os arch="i686"/>
			</or>
		</condition>
		<condition property="native.arch" value="x86-64">
			<or>
				<os arch="x86-64"/>
				<os arch="x86_64"/>
				<os arch="amd64"/>
				<os arch="k8"/>
			</or>
		</condition>
		<condition property="native.arch" value="powerpc">
			<or>
				<os arch="ppc"/>
				<os arch="PowerPC"/>
			</or>
		</condition>
		<condition property="native.arch" value="powerpc64">
			<or>
				<os arch="ppc64"/>
				<os arch="PowerPC64"/>
			</or>
		</condition>
		
		
		<!-- Set the system arch name -->
		<condition property="native.arch.name" value="x86">
			<equals arg1="${native.arch}" arg2="i586" casesensitive="false" trim="true"/>
		</condition>
		<condition property="native.arch.name" value="x86_64">
			<equals arg1="${native.arch}" arg2="x86-64" casesensitive="false" trim="true"/>
		</condition>
		<condition property="native.arch.name" value="ppc">
			<equals arg1="${native.arch}" arg2="powerpc" casesensitive="false" trim="true"/>
		</condition>
		<condition property="native.arch.name" value="ppc64">
			<equals arg1="${native.arch}" arg2="powerpc64" casesensitive="false" trim="true"/>
		</condition>
		
		<fail message="The ${os.arch} architecture is not currently supported.">
			<condition>
				<not>
					<isset property="native.arch.name"/>
				</not>
			</condition>
		</fail>
		<echo level="info">Compatible system architecture: ${native.arch.name}</echo>
		
		
		<!-- Special arch for osx -->
		<condition property="native.arch.osx" value="i386">
			<and>
				<os family="mac"/>
				<os family="unix"/>
				<equals arg1="${native.arch}" arg2="i586" casesensitive="false" trim="true"/>
			</and>
		</condition>
		<condition property="native.arch.osx" value="${native.arch.name}">
			<and>
				<os family="mac"/>
				<os family="unix"/>
			</and>
		</condition>
		
		
		<!-- Set 32 or 64 bit flag -->
		<property name="native.arch.model" value="${sun.arch.data.model}"/>
		<fail message="The ${native.arch.model}-bit data model is not currently supported.">
			<condition>
				<not>
					<or>
						<equals arg1="${native.arch.model}" arg2="32" casesensitive="false" trim="true"/>
						<equals arg1="${native.arch.model}" arg2="64" casesensitive="false" trim="true"/>
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">System architecture data model: ${native.arch.model} bit</echo>
		
		
		<!-- Set little or big endian
		<property name="native.arch.endian" value="${sun.cpu.endian}"/>
		<echo level="info">System architecture endian: ${native.arch.endian}</echo>
		 -->
		
		
		<!-- Determin the operating system -->
		<condition property="native.os" value="windows">
			<or>
				<os family="winnt" name="Windows 2000"/>
				<os family="winnt" name="Windows XP"/>
				<os family="winnt" name="Windows 2003"/>
				<os family="winnt" name="Windows Vista"/>
				<os family="winnt" name="Windows 2007"/>
				<os family="winnt" name="Windows 7"/>
			</or>
		</condition>
		<condition property="native.os" value="osx">
			<and>
				<os family="mac"/>
				<os family="unix"/>
			</and>
		</condition>
		<condition property="native.os" value="linux">
			<os family="unix" name="Linux"/>
		</condition>
		<condition property="native.os" value="freebsd">
			<os family="unix" name="FreeBSD"/>
		</condition>
		<condition property="native.os" value="solaris">
			<or>
				<os family="unix" name="Solaris"/>
				<os family="unix" name="SunOS"/>
			</or>
		</condition>
		
		<!-- Figure out the os family -->
		<condition property="native.os.isWindows" value="true">
			<equals arg1="${native.os}" arg2="windows" casesensitive="false" trim="true"/>
		</condition>
		<condition property="native.os.isUnix" value="true">
			<or>
				<equals arg1="${native.os}" arg2="linux" casesensitive="false" trim="true"/>
				<equals arg1="${native.os}" arg2="freebsd" casesensitive="false" trim="true"/>
				<equals arg1="${native.os}" arg2="solaris" casesensitive="false" trim="true"/>
			</or>
		</condition>
		<condition property="native.os.isMac" value="true">
			<equals arg1="${native.os}" arg2="osx" casesensitive="false" trim="true"/>
		</condition>
		
		<fail message="The ${os.name} ${os.version} operating system is not currently supported.">
			<condition>
				<not>
					<or>
						<isset property="native.os.isWindows"/>
						<isset property="native.os.isUnix"/>
						<isset property="native.os.isMac"/>
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Operating System: ${os.name} ${os.version} (${native.os} compatible)</echo>
		
		
		<!-- Try to locate the compiler -->
		<condition property="native.cc" value="gcc">
			<available filepath="${native.path}" file="gcc" type="file"/>
		</condition>
		<condition property="native.cc" value="gcc.exe">
			<available filepath="${native.path}" file="gcc.exe" type="file"/>
		</condition>
		<condition property="native.cc" value="cc">
			<available filepath="${native.path}" file="cc" type="file"/>
		</condition>
		<condition property="native.cc" value="cc.exe">
			<available filepath="${native.path}" file="cc.exe" type="file"/>
		</condition>
		
		<fail message="Could not locate a suitable compiler.  Please make sure your compiler is in your PATH or manually specify your native.cc value.">
			<condition>
				<not>
					<and>
						<isset property="native.cc"/>
						<or>
							<available filepath="${native.path}" file="${native.cc}"/>
							<available file="${native.cc}"/>
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Native Compiler: ${native.cc}</echo>
		
		
		<!-- Try to locate the linker -->
		<!-- Having gcc does a much better job at passing all the correct libraries to the linker -->
		<condition property="native.ld" value="ld">
			<available filepath="${native.path}" file="ld" type="file"/>
		</condition>
		<condition property="native.ld" value="ld.exe">
			<available filepath="${native.path}" file="ld.exe" type="file"/>
		</condition>
		<condition property="native.ld" value="gcc">
			<available filepath="${native.path}" file="gcc" type="file"/>
		</condition>
		<condition property="native.ld" value="gcc.exe">
			<available filepath="${native.path}" file="gcc.exe" type="file"/>
		</condition>
		
		<fail message="Could not locate a suitable linker.  Please make sure your linker is in your PATH or manually specify your native.ld value.">
			<condition>
				<not>
					<and>
						<isset property="native.ld"/>
						<or>
							<available filepath="${native.path}" file="${native.ld}"/>
							<available file="${native.ld}"/>
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Native Linker: ${native.ld}</echo>
		
		
		<!-- Try to locate strip -->
		<condition property="native.strip" value="strip">
			<available filepath="${native.path}" file="strip" type="file"/>
		</condition>
		<condition property="native.strip" value="strip.exe">
			<available filepath="${native.path}" file="strip.exe" type="file"/>
		</condition>
		
		<fail message="Could not locate strip command.  Please make sure your compiler is in your PATH or manually specify your native.cc value.">
			<condition>
				<not>
					<and>
						<isset property="native.strip"/>
						<or>
							<available filepath="${native.path}" file="${native.strip}"/>
							<available file="${native.strip}"/>
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Native Strip: ${native.strip}</echo>
		
		
		<!-- Try to locate make -->
		<condition property="native.make" value="make">
			<available filepath="${native.path}" file="make"/>
		</condition>
		<condition property="native.make" value="make.exe">
			<available filepath="${native.path}" file="make.exe"/>
		</condition>
		<condition property="native.make" value="mingw32-make.exe">
			<available filepath="${native.path}" file="mingw32-make.exe"/>
		</condition>
		<condition property="native.make" value="mingw64-make.exe">
			<available filepath="${native.path}" file="mingw64-make.exe"/>
		</condition>
		
		<fail message="Could not locate make command.  Please make sure make is in your PATH or manually specify your native.make value.">
			<condition>
				<not>
					<and>
						<isset property="native.make"/>
						<or>
							<available filepath="${native.path}" file="${native.make}"/>
							<available file="${native.make}"/>
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Native Make: ${native.make}</echo>
		
		
		<!-- Try to locate pkg-config -->
		<condition property="native.pkgconfig" value="pkg-config">
			<and>
				<available filepath="${native.path}" file="pkg-config"/>
				<isset property="native.os.isUnix"/>
			</and>
		</condition>
		<condition property="native.pkgconfig" value="pkg-config.exe">
			<available filepath="${native.path}" file="pkg-config.exe"/>
			<and>
				<available filepath="${native.path}" file="pkg-config"/>
				<isset property="native.os.isWindows"/>
			</and>
		</condition>
		<condition property="_pkgconfig.level" value="info" else="warning">
			<isset property="native.pkgconfig"/>
		</condition>
		<condition property="_pkgconfig.message" value="Native Pkgconfig: ${native.pkgconfig}" else="Could not locate a pkg-config utility.  Please review the generated build.properties.">
			<isset property="native.pkgconfig"/>
		</condition>
		<echo level="${_pkgconfig.level}">${_pkgconfig.message}</echo>
		
	
		<!-- Set the java compatible version -->
		<!-- property name="java.target" value="${ant.java.version}"/ -->
		<property name="java.target" value="1.5"/>
		<fail message="Invalid java target version.  Only java versions 1.5 and 1.6 have been tested.">
			<condition>
				<not>
					<and>
						<isset property="java.target"/>
						<or>
							<equals arg1="${java.target}" arg2="1.5" casesensitive="false" trim="false"/>
							<equals arg1="${java.target}" arg2="1.6" casesensitive="false" trim="false"/>
						</or>
					</and>
				</not>
			</condition>
		</fail>
		<echo level="info">Java Compatibility: ${java.target}</echo>
		
		<antcall target="-generate_cflags"/>
		<antcall target="-generate_ldflags"/>
	
		<!-- set system specific includes -->
		<condition property="native.includes" value="-I${java.include} -I${java.include}${file.separator}win32">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.includes" value="-I${java.include} -I${java.include}${file.separator}${native.os} -I/usr/include -I/usr/local/include">
			<isset property="native.os.isUnix"/>
		</condition>
		<!-- -F/System/Library/Frameworks/Carbon.framework/Frameworks -->
		<condition property="native.includes" value="-I/usr/lib -I${java.include}">
			<isset property="native.os.isMac"/>
		</condition>
		
		
		<propertyfile file="build.properties" comment="auto-generated by ant configure">
			<entry key="java.target"			value="${java.target}"/>
			<entry key="native.os"				value="${native.os}"/>
			<entry key="native.cc"				value="${native.cc}"/>
			<entry key="native.ld"				value="${native.ld}"/>
			<entry key="native.make"			value="${native.make}"/>
			<entry key="native.cflags"			value="${native.cflags}"/>
			<entry key="native.ldflags"			value="${native.ldflags}"/>
			<entry key="native.libs"			value="${native.libs}"/>
			<entry key="native.includes"		value="${native.includes}"/>
		</propertyfile>
	</target>
	
	<target name="-generate_cflags">
		<!-- set system specific cflags -->
		<condition property="native.cflags.pic" value="-fPIC">
			<and>
				<equals arg1="${native.arch.model}" arg2="64" casesensitive="false" trim="true"/>
				<or>
					<isset property="native.os.isUnix"/>
					<isset property="native.os.isMac"/>
				</or>
			</and>
		</condition>
		
		<!-- set optimization level flag -->
		<condition property="native.cflags.optimize" value="-O0" else="-O2">
			<isset property="project.isDebug"/>
		</condition>
		
		<!-- set additional debug cflags -->
		<condition property="native.cflags.debug" value="-g2 -ggdb -DDEBUG">
			<isset property="project.isDebug"/>
		</condition>
		
		<condition property="native.cflags" value="-c -m${native.arch.model} -march=${native.arch} -mtune=generic -std=c99 -pedantic -Wall ${native.cflags.optimize} -fno-strict-aliasing">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.cflags" value="-c -m${native.arch.model} -march=${native.arch} -mtune=generic -std=c99 -pedantic -Wall ${native.cflags.optimize} -fno-strict-aliasing ${native.cflags.pic}">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.cflags" value="-c -m${native.arch.model} -mtune=${native.arch} -arch ${native.arch.osx} -Wall ${native.cflags.optimize} -fno-strict-aliasing ${native.cflags.pic}">
			<!-- -isysroot=/Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.4 -->
			<isset property="native.os.isMac"/>
		</condition>
	</target>
	
	<target name="-generate_ldflags">
		<!-- set system specific ldflags -->
		<condition property="native.ldflags" value="-shared -Wl,--kill-at,--as-needed,${native.cflags.optimize}">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.ldflags" value="--as-needed -shared -static ${native.cflags.optimize}">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.ldflags" value="-arch ${native.arch.osx} -dylib -dynamic">
			<isset property="native.os.isMac"/>
		</condition>
	</target>
	
	<target name="-generate_libs" if="native.pkgconfig">
		<!-- set system specific libraries -->
		<echo>Checking for native dependencies...</echo>
		
		<condition property="native.pkgconfig.check" value="--exists x11 xtst">
			<isset property="native.os.isUnix"/>
		</condition>
		
		<condition property="native.pkgconfig.libs" value="--libs x11 xtst">
			<and>
				<isset property="native.os.isUnix"/>
				<not>
					<isset property="project.isStatic"/>
				</not>
			</and>
		</condition>
		<condition property="native.pkgconfig.libs" value="--libs --static x11 xtst">
			<and>
				<isset property="native.os.isUnix"/>
				<isset property="project.isStatic"/>
			</and>
		</condition>
		
		<exec executable="${native.pkgconfig}" failonerror="true">
			<arg line="${native.pkgconfig.check}"/>
		</exec>
		
		<exec executable="${native.pkgconfig}" resultproperty="native.libs" failonerror="true">
			<arg value="${native.pkgconfig.libs}"/>
		</exec>
	</target>
	
	<target name="-guess_libs" unless="native.pkgconfig">
		<!-- guess what system specific libraries to use -->
		<condition property="native.libs" value="-lgcc">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.libs" value="-lc -lX11 -lXtst">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.libs" value="-lc -ldylib1.o -framework Carbon -framework JavaVM">
			<isset property="native.os.isMac"/>
		</condition>
	</target>	
	
	
	<target name="compile" depends="configure" description="Compiles all Java and C source files.">
		<echo>Compiling java source...</echo>
		<mkdir dir="${dir.jar}"/>
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.bin}"/>
		<mkdir dir="${dir.obj}"/>
		
		<path id="classpath">
			<pathelement location="${dir.bin}"/>
			<!-- Use this to include addtional dependencies
			<fileset dir="${project.lib}">
				<include name="*.jar"/>
			</fileset>
			-->
		</path>
		<javac srcdir="${dir.src}"
			destdir="${dir.bin}"
			classpathref="classpath"
			debug="${project.debug}"
			optimize="${project.debug}"
			deprecation="false"
			includeantruntime="false"
			source="${java.target}"
			target="${java.target}"
		/>
		
		<echo>Creating JNI Headers...</echo>
		<javah 
			class="org.jnativehook.GlobalScreen" 
			outputFile="src/org/jnativehook/c_source/include/org_jnativehook_GlobalScreen.h"
			classpathref="classpath"
			verbose="yes" 
		/>
		
		<echo>Compiling C source...</echo>
		<mkdir dir="${dir.obj}"/>
		<mkdir dir="${dir.lib}/${native.os}/${native.arch.name}"/>
		
		<!-- set system specific src -->
		<condition property="native.src" value="windows">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.src" value="unix">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.src" value="osx">
			<isset property="native.os.isMac"/>
		</condition>
		
		<!-- set system specific ldflags -->
		<condition property="native.executable" value="${project.name}.dll">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.executable" value="lib${project.name}.so">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.executable" value="lib${project.name}.dylib">
			<isset property="native.os.isMac"/>
		</condition>
		
		<!-- set system shell -->
		<condition property="native.make.shell" value="${env.SystemRoot}\system32\cmd.exe" else="/bin/sh">
			<isset property="native.os.isWindows"/>
		</condition>
		
		<exec executable="${native.make}" dir="." failonerror="true">
			<env key="ANT_TASK" value="true"/>
			<env key="SHELL" value="${native.shell}"/>
			<env key="CC" value="${native.cc}"/>
			<env key="LD" value="${native.ld}"/>
			<env key="CFLAGS" value="${native.cflags}"/>
			<env key="LDFLAGS" value="${native.ldflags}"/>
			<env key="INCLUDES" value="${native.includes}"/>
			<env key="LIBS" value="${native.libs}"/>
			<env key="SRC_DIR" value="${dir.src}/org/jnativehook/c_source/${native.src}"/>
			<env key="OBJ_DIR" value="${dir.obj}"/>
			<env key="EXECUTABLE" value="${dir.lib}/${native.os}/${native.arch.name}/${native.executable}"/>
		</exec>
		
		
		<antcall target="-compile_strip"/>
		
		<echo>Copying libs...</echo>
		<mkdir dir="${dir.bin}/org/jnativehook/lib"/>
		<copy overwrite="true" todir="${dir.bin}/org/jnativehook/lib">
			<fileset dir="${dir.lib}" includes="**/*"/>
		</copy>
	</target>
	
	<!-- Private target to condtinally strip the native files -->
	<target name="-compile_strip" unless="project.isDebug">
		<echo>Stripping libs...</echo>
		<exec executable="${native.strip}" dir="." failonerror="true">
			<arg value="-v"/>
			<arg value="--strip-unneeded"/>
			<arg value="-R .comment"/>
			<arg file="${dir.lib}/${native.os}/${native.arch.name}/${native.executable}"/>
		</exec>
	</target>
	
	<target name="jar" depends="compile" description="Creates the library jar file">
		<echo>Creating JNativeHook.jar...</echo>
		<mkdir dir="${dir.jar}"/>
		<jar jarfile="${dir.jar}/JNativeHook.jar" basedir="${dir.bin}">
			<include name="org/jnativehook/keyboard/**"/>
			<include name="org/jnativehook/**"/>
			<exclude name="org/jnativehook/c_source/**"/>
			<exclude name="org/jnativehook/lib/**/history.xml"/>
			<!-- <exclude name="org/jnativehook/example/NativeHookDemo.class"/> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.example.NativeHookDemo"/>
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${project.name} Library"/>
					<attribute name="Implementation-Version" value="${project.version}"/> 
					<attribute name="Implementation-Vendor" value="${project.vendor}"/>
				</section>
			</manifest>
		</jar>
	</target>
	
	<target name="javadoc" depends="jar" description="Generates javadoc api documentation">
		<echo level="info">Generating API Documenation...</echo>
	
		<!-- Delete any previous javadocs -->
		<delete dir="${dir.doc}"/>
		<mkdir dir="${dir.doc}"/>
		
		<mkdir dir="${dir.doc}"/>
		<javadoc destdir="${dir.doc}" windowtitle="${project.name}" author="true" version="true" use="true">
			<packageset dir="src" defaultexcludes="yes">
				<include name="org/jnativehook/**"/>
				<exclude name="org/jnativehook/c_source/**"/>
				<exclude name="org/jnativehook/lib/**"/>
			</packageset>
			
			<doctitle><![CDATA[<h1>${project.name} API Documentation</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2006-2010 Alexander Barker. All Rights Reserved.</i>]]></bottom>
			
			<!--
			<tag name="to.do" scope="all" description="To Do:"/>
			<tag name="fix.me" scope="all" description="Fix Needed:"/>
			-->
			
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/"/>
		</javadoc>
	</target>
	
	<target name="package" depends="jar,javadoc" description="Creates zip files for distribution">
		<!-- Copy Files To Dist Locations -->
		<echo>Creating Distribution Archive...</echo>
		<zip destfile="${dir.dist}/JNativeGrab-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.jar}" prefix="${project.name}/jar">
				<include name="*.jar"/>
			</zipfileset>
			
			<zipfileset dir="${dir.doc}" prefix="${project.name}/doc">
				<exclude name="**/.*"/>
			</zipfileset>	
			
			<zipfileset dir="${basedir}" prefix="${project.name}">
				<include name="license.txt"/>
				<include name="readme.txt"/>
			</zipfileset>
		</zip>
		
		<zip destfile="${dir.dist}/JNativeGrab-src-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${basedir}" prefix="${project.name}">
				<include name="*.txt"/>
				<include name="build.*"/>
				<include name="Makefile"/>
				<exclude name="build.properties"/>
			</zipfileset>
			
			<zipfileset dir="${dir.doc}" prefix="${project.name}/doc">
				<exclude name="**/.*"/>
			</zipfileset>
			
			<zipfileset dir="${dir.src}" prefix="${project.name}/src">
				<exclude name="**/.*"/>
				<exclude name="org/jnativehook/lib/**"/>
			</zipfileset>
		</zip>
	</target>
	
	<target name="all" depends="jar" description="builds all targets">
	</target>
</project>
