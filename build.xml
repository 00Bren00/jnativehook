<?xml version="1.0" encoding="UTF-8"?>

<project default="all" basedir="." xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks">
	<property environment="os"/>
	<property environment="env"/>
	<property file="build.properties"/>
	
	<!-- Project Settings -->
	<property name="project.name"		value="JNativeHook"/>
	<property name="project.vendor" 	value="1stleg Development"/>
	<property name="project.version"	value="0.9.172"/>
	
	<!-- Path Settings -->
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.dist" value="${basedir}/dist"/>
	
	<property name="dir.jar" value="${dir.dist}/jar"/>
	<property name="dir.lib" value="${dir.src}/org/jnativehook/lib"/>
	
	<property name="dir.class" value="${basedir}/bin"/>
	<property name="dir.obj" value="${basedir}/bin/obj"/>
	
	
	<target name="clean" description="prepares the environment">
		<echo>Cleaning old build structure...</echo>
		<delete includeemptydirs="false" verbose="true">
			<fileset dir="${dir.class}" includes="**/*"/>
		</delete>
		
		<delete file="build.properties" verbose="true" failonerror="false"/>
	</target>
	
	
	<target name="configure" unless="project.isConfigured" description="Automatically generates a configuration for this enviroment.">
		<echo>Checking environment sanity...</echo>
		
		<!-- Try to locate the include folder for java headers -->
		<condition property="java.include" value="${os.JAVA_HOME}${file.separator}include">
			<available file="${os.JAVA_HOME}/include" type="dir"/>
		</condition>
		<condition property="java.include" value="${java.home}${file.separator}..${file.separator}include">
			<available file="${java.home}/../include" type="dir"/>
		</condition>
		<fail message="Could not determine java.include location.  Please set your JAVA_HOME environment variable or manually specify your java.include location.">
			<condition>
				<not>
					<or>
						<isset property="java.include"/>
						<available file="${java.include}" type="dir"/>
					</or>
				</not>
			</condition>
		</fail>
		<echo>Found java include location: ${java.include}</echo>
		
		
		<!-- Figure out of the system arch is supported -->
		<condition property="native.arch" value="i586">
			<or>
				<os arch="x86"/>
				<os arch="i386"/>
				<os arch="i486"/>
				<os arch="i586"/>
				<os arch="i686"/>
			</or>
		</condition>
		<condition property="native.arch" value="k8">
			<or>
				<os arch="x86_64"/>
				<os arch="amd64"/>
				<os arch="k8"/>
			</or>
		</condition>
		<condition property="native.arch" value="powerpc">
			<or>
				<os arch="ppc"/>
				<os arch="PowerPC"/>
			</or>
		</condition>
		<condition property="native.arch" value="powerpc64">
			<or>
				<os arch="ppc64"/>
				<os arch="PowerPC64"/>
			</or>
		</condition>
		<property name="native.arch" value="${os.arch}"/>
		<echo>Compatible system architecture: ${native.arch}</echo>
		
		
		<!-- Set 32 or 64 bit flag -->
		<property name="native.arch.model" value="${sun.arch.data.model}"/>
		<echo>System architecture data model: ${native.arch.model} bit</echo>
		<!-- echo>${sun.cpu.endian}</echo -->
		
		
		<!-- Determin the os family -->
		<condition property="native.os" value="windows">
			<or>
				<os family="winnt" name="Windows 2000"/>
				<os family="winnt" name="Windows XP"/>
				<os family="winnt" name="Windows 2003"/>
				<os family="winnt" name="Windows Vista"/>
				<os family="winnt" name="Windows 2007"/>
				<os family="winnt" name="Windows 7"/>
			</or>
		</condition>
		<condition property="native.os" value="osx">
			<and>
				<os family="mac"/>
				<os family="unix"/>
			</and>
		</condition>
		<condition property="native.os" value="linux">
			<os family="unix" name="Linux"/>
		</condition>
		<condition property="native.os" value="freebsd">
			<os family="unix" name="FreeBSD"/>
		</condition>
		<condition property="native.os" value="solaris">
			<or>
				<os family="unix" name="Solaris"/>
				<os family="unix" name="SunOS"/>
			</or>
		</condition>
		<fail message="The ${os.name} ${os.version} operating system is not currently supported.">
			<condition>
				<not>
					<isset property="native.os"/>
				</not>
			</condition>
		</fail>
		<echo>operating System: ${os.name} ${os.version} (${native.os} compatible)</echo>
		
		<!-- Try to locate a suitable C compiler -->
		<condition property="native.cc" value="gcc">
			<available file="gcc">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<condition property="native.cc" value="icc">
			<available file="icc">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<property name="native.cc" value="cc"/>
		<echo>Native Compiler: ${native.cc}</echo>
		
		
		<!-- Try to locate a suitable linker compiler -->
		<condition property="native.ld" value="gcc">
			<available file="gcc">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<condition property="native.ld" value="icc">
			<available file="icc">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<property name="native.ld" value="ld"/>
		<echo>Native Linker: ${native.ld}</echo>
		
		
		<condition property="native.make" value="make">
			<available file="make">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<condition property="native.make" value="mingw32-make">
			<available file="mingw32-make">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<condition property="native.make" value="mingw64-make">
			<available file="mingw64-make">
				<filepath>
					<pathelement path="${os.PATH}"/>
				</filepath>
			</available>
		</condition>
		<property name="native.make" value="make"/>
		<echo>Native Make: ${native.make}</echo>
		
		
		<property name="java.target" value="${ant.java.version}"/>
		<echo>Java Compatibility: ${java.target}</echo>
		
		<property name="java.fork" value="yes"/>
		<echo>Fork Java Compiler: ${java.fork}</echo>
		
		<property name="native.fork" value="yes"/>
		<echo>Fork C Compiler: ${native.fork}</echo>
		
		<!-- Set the project debug flag -->
		<condition property="project.debug" value="true" else="false">
			<and>
				<isset property="project.debug"/>
				<or>
					<equals arg1="${project.debug}" arg2="true" casesensitive="false" trim="false"/>
					<equals arg1="${project.debug}" arg2="yes" casesensitive="false" trim="false"/>
				</or>
			</and>
		</condition>
		<echo>Debug Mode: ${project.debug}</echo>
		
		
		<propertyfile file="build.properties" comment="auto-generated by ant configure">
			<entry key="project.debug"			value="${project.debug}"/>
			<entry key="java.fork"				value="yes"/>
			<entry key="java.target"			value="${java.target}"/>
			<entry key="java.include" 			value="${java.include}"/>
			<entry key="native.fork" 			value="yes"/>
			<entry key="native.arch" 			value="${native.arch}"/>
			<entry key="native.arch.model"		value="${native.arch.model}"/>
			<entry key="native.os"				value="${native.os}"/>
			<entry key="native.cc"				value="${native.cc}"/>
			<entry key="native.ld"				value="${native.ld}"/>
			<entry key="native.make"			value="${native.make}"/>
		</propertyfile>
	</target>
	
	
	<target name="verify" description="verify the build properties.">
		<!-- Make sure we have values for all needed build properties -->
		<fail message="One or more build properties are missing. Please be sure to run ant configure first.">
			<condition>
				<not>
					<and>
						<isset property="project.debug"/>
						<isset property="java.fork"/>
						<isset property="java.target"/>
						<isset property="java.include"/>
						<isset property="native.fork"/>
						<isset property="native.arch"/>
						<isset property="native.arch.model"/>
						<isset property="native.os"/>
						<isset property="native.cc"/>
						<isset property="native.ld"/>
						<isset property="native.make"/>
					</and>
				</not>
			</condition>
		</fail>
		
		<!-- Figure out the os family -->
		<condition property="native.os.isWindows" value="true">
			<equals arg1="${native.os}" arg2="windows" casesensitive="false" trim="true"/>
		</condition>
		<condition property="native.os.isUnix" value="true">
			<or>
				<equals arg1="${native.os}" arg2="linux" casesensitive="false" trim="true"/>
				<equals arg1="${native.os}" arg2="freebsd" casesensitive="false" trim="true"/>
				<equals arg1="${native.os}" arg2="solaris" casesensitive="false" trim="true"/>
			</or>
		</condition>
		<condition property="native.os.isMac" value="true">
			<equals arg1="${native.os}" arg2="osx" casesensitive="false" trim="true"/>
		</condition>
		
		<fail message="The value ${native.os} is not recognized as a compatible operating system.">
			<condition>
				<not>
					<or>
						<isset property="native.os.isWindows"/>
						<isset property="native.os.isUnix"/>
						<isset property="native.os.isMac"/>
					</or>
				</not>
			</condition>
		</fail>
		
		<!-- Check for debug -->
		<condition property="project.isDebug" value="true">
			<istrue value="${project.debug}"/>
		</condition>
		
		
		<!-- Set the system arch name -->
		<condition property="sys.arch" value="i586">
			<equals arg1="${native.arch}" arg2="i586" casesensitive="false" trim="true"/>
		</condition>
		<condition property="sys.arch" value="amd64">
			<equals arg1="${native.arch}" arg2="k8" casesensitive="false" trim="true"/>
		</condition>
		<condition property="sys.arch" value="ppc">
			<equals arg1="${native.arch}" arg2="powerpc" casesensitive="false" trim="true"/>
		</condition>
		<condition property="sys.arch" value="ppc64">
			<equals arg1="${native.arch}" arg2="powerpc64" casesensitive="false" trim="true"/>
		</condition>
		<condition property="sys.arch.isx86" value="true">
			<or>
				<equals arg1="${native.arch}" arg2="i586" casesensitive="false" trim="true"/>
				<equals arg1="${native.arch}" arg2="amd64" casesensitive="false" trim="true"/>
			</or>
		</condition>
		<fail message="The ${os.arch} architecture is not currently supported.">
			<condition>
				<not>
					<isset property="sys.arch"/>
				</not>
			</condition>
		</fail>

		<fail message="The ${sun.arch.data.model}-bit data model is not currently supported.">
			<condition>
				<not>
					<or>
						<equals arg1="${native.arch.model}" arg2="32" casesensitive="false" trim="true"/>
						<equals arg1="${native.arch.model}" arg2="64" casesensitive="false" trim="true"/>
					</or>
				</not>
			</condition>
		</fail>
		
		<fail message="Could not locate a suitable compiler.  Please make sure your compiler is in your PATH or manually specify your native.cc value.">
			<condition>
				<not>
					<and>
						<isset property="native.cc"/>
						<available file="${native.cc}">
							<filepath>
								<pathelement path="${os.PATH}"/>
							</filepath>
						</available>
					</and>
				</not>
			</condition>
		</fail>

		<fail message="Could not locate a suitable linker.  Please make sure your linker is in your PATH or manually specify your native.ld value.">
			<condition>
				<not>
					<and>
						<isset property="native.ld"/>
						<available file="${native.ld}">
							<filepath>
								<pathelement path="${os.PATH}"/>
							</filepath>
						</available>
					</and>
				</not>
			</condition>
		</fail>

		<fail message="Could not locate make command.  Please make sure make is in your PATH or manually specify your native.make value.">
			<condition>
				<not>
					<and>
						<isset property="native.make"/>
						<available file="${native.make}">
							<filepath>
								<pathelement path="${os.PATH}"/>
							</filepath>
						</available>
					</and>
				</not>
			</condition>
		</fail>
	</target>
	
	<target name="compile" depends="verify" description="Compiles all Java and C source files.">
		<echo>Compiling java source...</echo>
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.class}"/>
		<path id="classpath">
			<pathelement location="${dir.class}"/>
			<!-- Use this to include addtional dependencies
			<fileset dir="${project.lib}">
				<include name="*.jar"/>
			</fileset>
			-->
		</path>
		<javac srcdir="${dir.src}"
			destdir="${dir.class}"
			classpathref="classpath"
			debug="${project.debug}"
			deprecation="false"
			source="${java.target}"
			target="${java.target}"
		/>
		
		<echo>Compiling C source...</echo>
		<mkdir dir="${dir.obj}"/>
		<mkdir dir="${dir.lib}/${native.os}-${sys.arch}"/>
		
		
		<!-- set system specific src -->
		<condition property="native.src" value="windows">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.src" value="unix">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.src" value="osx">
			<isset property="native.os.isMac"/>
		</condition>
		
		<!-- set system specific cflags -->
		<condition property="native.cflags" value="-D_JNI_IMPLEMENTATION_">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.cflags" value="-lX11 -fPIC">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.cflags" value="-fPIC">
			<isset property="native.os.isMac"/>
		</condition>
		
		<!-- set system specific ldflags -->
		<condition property="native.ldflags" value="--kill-at">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.ldflags" value="-lX11 -L/usr/lib -L/usr/local/lib">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.ldflags" value="">
			<isset property="native.os.isMac"/>
		</condition>
		
		<!-- set system specific includes -->
		<condition property="native.include" value="">
			<isset property="native.os.isWindows"/>
		</condition>
		<condition property="native.include" value="-I/usr/include -I/usr/local/include">
			<isset property="native.os.isUnix"/>
		</condition>
		<condition property="native.include" value="">
			<isset property="native.os.isMac"/>
		</condition>
		
		<!-- set debug flag -->
		<condition property="native.debug" value="-DDEBUG">
			<isset property="project.isDebug"/>
		</condition>
		
		<!-- set system shell -->
		<condition property="native.shell" value="${env.SystemRoot}\system32\cmd.exe" else="/bin/sh">
			<isset property="native.os.isWindows"/>
		</condition>
		
		<exec executable="${native.make}" dir="." failonerror="true">
			<env key="ANT_TASK" value="true"/>
			<env key="SHELL" value="${native.shell}"/>
			<env key="CC" value="${native.cc}"/>
			<env key="LD" value="${native.ld}"/>
			<env key="MARCH" value="${native.arch}"/>
			<env key="MODEL" value="${native.arch.model}"/>
			<env key="CFLAGS" value="${native.cflags}"/>
			<env key="LDFLAGS" value="${native.ldflags}"/>
			<env key="SRC_DIR" value="${dir.src}/org/jnativehook/c_source/${native.src}"/>
			<env key="OBJ_DIR" value="${dir.obj}"/>
			<env key="NATIVE_INCLUDE" value="${native.include}"/>
			<env key="JAVA_INCLUDE" value="-I${java.include} -I${java.include}${file.separator}${native.os}"/>
			<env key="DEBUG" value="${native.debug}"/>
			<env key="EXECUTABLE" value="${project.name}"/>
		</exec>
		
		<echo>Copying libs...</echo>
		<mkdir dir="${dir.class}/org/jnativehook/lib"/>
		<copy overwrite="true" todir="${dir.class}/org/jnativehook/lib">
			<fileset dir="${dir.lib}" includes="**/*"/>
		</copy>
	</target>
	
	<target name="jar" depends="compile" description="Builds the required jar binaries">
		<echo>Creating JNativeHook.jar...</echo>
		<mkdir dir="${dir.jar}"/>
		<jar jarfile="${dir.jar}/JNativeHook.jar" basedir="${dir.class}">
			<include name="org/jnativehook/keyboard/**"/>
			<include name="org/jnativehook/**"/>
			<exclude name="org/jnativehook/c_source/**"/>
			<exclude name="org/jnativehook/lib/**/history.xml"/>
			<!-- <exclude name="org/jnativehook/Driver.class"/> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.example.NativeHookDemo"/>
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${project.name} Library"/>
					<attribute name="Implementation-Version" value="${project.version}"/> 
					<attribute name="Implementation-Vendor" value="${project.vendor}"/>
				</section>
			</manifest>
		</jar>
	</target>
	
	
	<target name="package" depends="jar" description="Builds the server binaries">
		<!-- Copy Files To Dist Locations -->
		<echo>Creating Distribution Archive...</echo>
		<zip destfile="${dir.dist}/JNativeGrab.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.jar}" includes="*.jar"/>
		</zip>
		
		<tar destfile="${dir.dist}/JNativeGrab.tar.gz" compression="gzip">
			<tarfileset dir="${dir.jar}" includes="*.jar"/>
		</tar>
		
		<tar destfile="${dir.dist}/JNativeGrab.tar.bz2" compression="bzip2">
			<tarfileset dir="${dir.jar}" includes="*.jar"/>
		</tar>
	</target>
	
	
	<target name="all" depends="package" description="builds all targets">
	</target>
</project>
