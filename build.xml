<?xml version="1.0" encoding="UTF-8"?>

<project default="all" basedir="." xmlns:cpptasks="antlib:net.sf.antcontrib.cpptasks">
	<property environment="os"/>
	<property environment="env"/>
	
	<!-- Project Settings -->
	<property name="project.name"		value="JNativeHook"/>
	<property name="project.vendor" 	value="1stleg Development"/>
	<property name="project.version"	value="0.9.139"/>
	
	<!-- Path Settings -->
	<property name="dir.src" value="${basedir}/src"/>
	<property name="dir.dist" value="${basedir}/dist"/>
	
	<property name="dir.jar" value="${dir.dist}/jar"/>
	<property name="dir.lib" value="${dir.src}/org/jnativehook/lib"/>
	
	<property name="dir.class" value="${basedir}/bin"/>
	<property name="dir.obj" value="${basedir}/bin/obj"/>
	
	<target name="configure">
		<delete file="build.properties" verbose="true" failonerror="false"/>
		
		<echo>Checking environment sanity...</echo>
		<!-- Try to locate the include folder for java headers -->
		<condition property="javac.include" value="${os.JAVA_HOME}${file.separator}include">
			<and>
				<not>
					<isset property="javac.include"/>
				</not>
				
				<available file="${os.JAVA_HOME}/include" type="dir"/>
			</and>
		</condition>
		<condition property="javac.include" value="${java.home}${file.separator}..${file.separator}include">
			<and>
				<not>
					<isset property="javac.include"/>
				</not>
				
				<available file="${java.home}/../include" type="dir"/>
			</and>
		</condition>
		<fail unless="javac.include" message="Could not determine javac.include location.  Please set your JAVA_HOME environment variable or manually specify your javac.include location."/>
		<echo>Found java include location: ${javac.include}</echo>
		
		
		<!-- Figure out of the system arch is supported -->
		<condition property="gcc.arch" value="i586">
			<and>
				<not>
					<isset property="gcc.arch"/>
				</not>
				
				<or>
					<os arch="x86"/>
					<os arch="i386"/>
					<os arch="i486"/>
					<os arch="i586"/>
					<os arch="i686"/>
				</or>
			</and>
		</condition>
		<condition property="gcc.arch" value="k8">
			<and>
				<not>
					<isset property="gcc.arch"/>
				</not>
				
				<or>
					<os arch="x86_64"/>
					<os arch="amd64"/>
					<os arch="k8"/>
				</or>
			</and>
		</condition>
		<fail unless="gcc.arch" message="The ${os.arch} architecture is not currently supported."/>
		<echo>Compatible system architecture: ${gcc.arch}</echo>
		
		<!-- Set 32 or 64 bit flag -->
		<condition property="gcc.arch.model" value="${sun.arch.data.model}">
				<not>
					<isset property="gcc.arch.model"/>
				</not>
		</condition>
		<echo>System architecture data model: ${gcc.arch.model} bit</echo>
		<!-- echo>${sun.cpu.endian}</echo -->
		
		
		<!-- Set the gcc debug flag ONLY IF debug is true, unset implies false -->
		<echo>Debug Mode: ${project.debug}</echo>
		
		<!-- Determin the os family -->
		<condition property="gcc.os.family" value="winnt">
			<os family="winnt"/>
		</condition>
		<condition property="gcc.os.family" value="osx">
			<and>
				<os family="mac"/>
				<os family="unix"/>
			</and>
		</condition>
		<condition property="gcc.os.family" value="unix">
			<os family="unix"/>
		</condition>
		<fail unless="gcc.os.family" message="The ${os.name} ${os.version} opperating system is not currently supported."/>
		<echo>Opperating System: ${os.name} ${os.version} (${gcc.os.family})</echo>
		
		<propertyfile file="build.properties" comment="auto-generated by ant configure">
			<entry key="project.debug"			value="${project.debug}"/>
			<entry key="javac.fork"				value="yes"/>
			<entry key="javac.target"			value="${ant.java.version}"/>
			<entry key="javac.include" 			value="${javac.include}"/>
			<entry key="gcc.arch" 				value="${gcc.arch}"/>
			<entry key="gcc.arch.model"			value="${gcc.arch.model}"/>
			<entry key="gcc.os.family"			value="${gcc.os.family}"/>
		</propertyfile>
	</target>
	
	<target name="clean" description="prepares the environment">
		<echo>Cleaning old build structure...</echo>
		<delete includeemptydirs="false" verbose="true">
			<fileset dir="${dir.class}" includes="**/*"/>
		</delete>
	</target>
	
	
	<target name="compile" depends="" description="Compiles the classes">
		<property file="build.properties"/>
		<fail message="Your build.properties file appears to be incomplete.  Please verify your settings or run the ant configure task.">
			<condition>
				<not>
					<and>
						<isset property="project.debug"/>
						<isset property="javac.fork"/>
						<isset property="javac.target"/>
						<isset property="javac.include"/>
						<isset property="gcc.arch"/>
						<isset property="gcc.arch.model"/>
						<isset property="gcc.os.family"/>
					</and>
				</not>
			</condition>
		</fail>
		
		
		<condition property="gcc.os.family.isWindows" value="true">
			<equals arg1="${gcc.os.family}" arg2="winnt" casesensitive="false" trim="true"/>
		</condition>
		<condition property="gcc.os.family.isUnix" value="true">
			<equals arg1="${gcc.os.family}" arg2="unix" casesensitive="false" trim="true"/>
		</condition>
		<condition property="gcc.os.family.isMac" value="true">
			<equals arg1="${gcc.os.family}" arg2="osx" casesensitive="false" trim="true"/>
		</condition>
		<fail message="The ${gcc.os.family} opperating system is not currently supported.">
			<condition>
				<not>
					<or>
						<isset property="gcc.os.family.isWindows"/>
						<isset property="gcc.os.family.isUnix"/>
						<isset property="gcc.os.family.isMac"/>
					</or>
				</not>
			</condition>
		</fail>
		
		<condition property="project.isDebug" value="true">
			<istrue value="${project.debug}"/>
		</condition>
		
		<condition property="sys.arch" value="${gcc.arch}" else="amd64">
			<equals arg1="${gcc.arch}" arg2="i586" casesensitive="false" trim="true"/>
		</condition>
		
		<echo>Compiling java source...</echo>
		<mkdir dir="${dir.dist}"/>
		<mkdir dir="${dir.class}"/>
		<path id="classpath">
			<pathelement location="${dir.class}"/>
			<!--
			<fileset dir="${project.lib}">
				<include name="*.jar"/>
			</fileset>
			-->
		</path>
		<javac srcdir="${dir.src}"
			destdir="${dir.class}"
			classpathref="classpath"
			debug="${project.debug}"
			deprecation="false"
			source="${javac.target}"
			target="${javac.target}"
		/>
		
		<echo>Compiling C source...</echo>
		<mkdir dir="${dir.obj}"/>
		<mkdir dir="${dir.lib}/${os.name}-${sys.arch}"/>
		<cpptasks:cc
			multithreaded="true"
			optimize="speed"
			
			outtype="shared"
			link="shared"
			
			outfile="${dir.lib}/${os.name}-${sys.arch}/JNativeHook"
			objdir="${dir.obj}"
			
			debug="${project.debug}"
			warnings="diagnostic"
		>
			<compiler name="gcc">
				<includepath location="${dir.src}/org/jnativehook/c_source"/>
				<includepath>
					<dirset dir="${javac.include}">
						<include name="**"/>
					</dirset>
				</includepath>
				
				<includepath location="/usr/include" if="gcc.os.family.isUnix"/>
				<includepath location="/usr/local/include" if="gcc.os.family.isUnix"/>
				
				<fileset dir="${dir.src}/org/jnativehook/c_source">
					<include name="windows/*.c" if="gcc.os.family.isWindows"/>
					<include name="unix/*.c" if="gcc.os.family.isUnix"/>
					<include name="osx/*.c" if="gcc.os.family.isMac"/>
				</fileset>
				
				<compilerarg value="-m${gcc.arch.model}"/>
				<compilerarg value="-march=${gcc.arch}"/>
				<compilerarg value="-fPIC"/>
				<compilerarg value="-Wall"/>
				<compilerarg value="-O3"/>
				<compilerarg value="-fno-strict-aliasing"/>
				<compilerarg value="-lX11" if="gcc.os.family.isUnix"/>
				<compilerarg value="-DDEBUG" if="project.isDebug"/>
				
				<!-- compilerarg value="-v"/ -->
			</compiler>
			
			<linker name="gcc">
				<linkerarg value="-m${gcc.arch.model}"/>
				<linkerarg value="-march=${gcc.arch}"/>
				<linkerarg value="-fPIC"/>
				<linkerarg value="-Wall"/>
				<linkerarg value="-O3"/>
				<linkerarg value="-fno-strict-aliasing"/>
				
				<linkerarg value="-lX11" if="gcc.os.family.isUnix"/>
				<linkerarg value="-L/usr/lib" if="gcc.os.family.isUnix"/>
				<linkerarg value="-L/usr/local/lib" if="gcc.os.family.isUnix"/>
				
				<!-- linkerarg value="-v"/ -->
			</linker>
			
			<versioninfo
				companyname="${project.vendor}"
				productname="${project.name}"
				productversion="${project.version}"
			/>
		</cpptasks:cc>
		
		
		<echo>Copying libs...</echo>
		<mkdir dir="${dir.class}/org/jnativehook/lib"/>
		<copy overwrite="true" todir="${dir.class}/org/jnativehook/lib">
			<fileset dir="${dir.lib}" includes="**/*" excludes="**/history.xml"/>
		</copy>
	</target>
	
	<target name="jar" depends="compile" description="Builds the required jar binaries">
		<echo>Creating JNativeHook.jar...</echo>
		<mkdir dir="${dir.jar}"/>
		<jar jarfile="${dir.jar}/JNativeHook.jar" basedir="${dir.class}">
			<include name="org/jnativehook/keyboard/**"/>
			<include name="org/jnativehook/**"/>
			<exclude name="org/jnativehook/c_source/**"/>
			<exclude name="org/jnativehook/lib/**/history.xml"/>
			<!-- <exclude name="org/jnativehook/Driver.class"/> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.example.Driver"/>
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${project.name} Library"/>
					<attribute name="Implementation-Version" value="${project.version}"/> 
					<attribute name="Implementation-Vendor" value="${project.vendor}"/>
				</section>
			</manifest>
		</jar>
	</target>
	
	
	<target name="package" depends="jar" description="Builds the server binaries">
		<!-- Copy Files To Dist Locations -->
		<echo>Creating Distribution Archive...</echo>
		<zip destfile="${dir.dist}/JNativeGrab.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.jar}" includes="*.jar"/>
		</zip>
		
		<tar destfile="${dir.dist}/JNativeGrab.tar.gz" compression="gzip">
			<tarfileset dir="${dir.jar}" includes="*.jar"/>
		</tar>
		
		<tar destfile="${dir.dist}/JNativeGrab.tar.bz2" compression="bzip2">
			<tarfileset dir="${dir.jar}" includes="*.jar"/>
		</tar>
	</target>
	
	
	<target name="all" depends="package" description="builds all targets">
	</target>
</project>
