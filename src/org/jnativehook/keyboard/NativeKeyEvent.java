/* Copyright (c) 2007-2010 - Alex Barker (alex@1stleg.com)
 * 
 * JNativeHook is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.jnativehook.keyboard;

//Imports
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import org.jnativehook.GlobalScreen;
import org.jnativehook.NativeInputEvent;
 
/**
 * An event which indicates that a keystroke occurred on the system.
 * <p>
 * TODO Add more in depth description.  
 */
public class NativeKeyEvent extends NativeInputEvent {
	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 5228137904514960737L;
	
	/** The raw native key code. */
	private int rawCode;
	
	/** The virtual key code. */
	private int keyCode;
	
	/** The Unicode key char. */
	private char keyChar;
	
	/** The virtual key location. */
	private int keyLocation;
	
	/** The first number in the range of ids used for native key events. */
	public static final int NATIVE_KEY_FIRST = 2400;
	
	/** The last number in the range of ids used for native key events. */
	public static final int NATIVE_KEY_LAST = 2402;
	
	/** The "native key typed" event id. */
	public static final int NATIVE_KEY_TYPED = NATIVE_KEY_FIRST;
	
	/** The "native key pressed" event id. */
	public static final int NATIVE_KEY_PRESSED = 1 + NATIVE_KEY_FIRST;
	
	/** The "native key released" event id. */
	public static final int NATIVE_KEY_RELEASED = 2 + NATIVE_KEY_FIRST;

	
	/**
	 * Instantiates a new native key event.
	 * <p>
	 * Note that passing in an invalid id results in unspecified behavior.
	 * @param id - the type of event
	 * @param when - the time the event occurred
	 * @param modifiers - the modifier keys down during event (shift, ctrl, alt, meta).
	 * FIXME Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.
	 * @param rawCode - The native system key for this event.  This is the number used to represent a symbols visible on a keyboard  and not the translated key code it may represent.  
	 * @param keyCode - The virtual key code generated by this event
	 * @param keyChar - The Unicode char generated by this event
	 */
	public NativeKeyEvent(int id, long when, int modifiers, int rawCode, int keyCode, char keyChar) {
		super(GlobalScreen.getInstance(), id, when, modifiers);
		
		this.rawCode = rawCode;
		this.keyCode = keyCode;
		this.keyChar = keyChar;
	}
	
	/**
	 * Instantiates a new native key event.
	 * <p>
	 * Note that passing in an invalid id results in unspecified behavior.
	 * @param id - the type of event
	 * @param when - the time the event occurred
	 * @param modifiers - the modifier keys down during event (shift, ctrl, alt, meta).
	 * FIXME Either extended _DOWN_MASK or old _MASK modifiers should be used, but both models should not be mixed in one event. Use of the extended modifiers is preferred.
	 * @param rawCode - The native system key for this event.  This is the number used to represent a symbols visible on a keyboard  and not the translated key code it may represent.  
	 * @param keyCode - The virtual key code generated by this event
	 * @param keyChar - The Unicode char generated by this event
	 * @param keyLocation - the location id of the key generating this event.
	 */
	public NativeKeyEvent(int id, long when, int modifiers, int rawCode, int keyCode, char keyChar, int keyLocation) {
		this(id, when, modifiers, rawCode, keyCode, keyChar);
		
		this.keyLocation = keyLocation;
	}

	
	/**
	 * Returns the rawCode associated with the native key in this event.
	 *
	 * @return the native system key for this event.  This is the number used to represent a symbols visible on a keyboard  and not the translated key code it may represent.
	 */
	public int getRawCode() {
		return this.rawCode;
	}
	
	/**
	 * Set the rawCode value in this event.
	 *
	 * @param rawCode - The native system key for this event.  This is the number used to represent a symbols visible on a keyboard  and not the translated key code it may represent.
	 */
	public void setRawCode(int rawCode) {
		 this.rawCode = rawCode;
	}
	
	
	/**
	 * Returns the character associated with the virtual key in this event.
	 * FIXME Check and make sure the key-typed event for shift + "a" returns the value for "A".
	 * @return the Unicode character defined for this key event.
	 */
	public char getKeyChar() {
		return this.keyChar;
	}
	
	/**
	 * Set the keyChar value in this event.
	 * 
	 * @param keyChar - The Unicode char generated by this event
	 */
	public void setKeyChar(char keyChar) {
		 this.keyChar = keyChar;
	}

	/**
	 * Returns the keyCode associated with the virtual key in this event.
	 * FIXME Always return VK_UNDEFINED for NATIVE_KEY_TYPED events.
	 * @return the virtual key code generated by this event. Always returns VK_UNDEFINED for NATIVE_KEY_TYPED events.
	 */
	public int getKeyCode() {
		return this.keyCode;
	}
	
	/**
	 * Set the keyCode value in this event.
	 *
	 * @param keyCode - The virtual key code generated by this event
	 */
	public void setKeyCode(int keyCode) {
		 this.keyCode = keyCode;
	}
	
	/**
	 * Returns the location of the virtual key for this event.
	 * FIXME Always return KEY_LOCATION_UNKNOWN for NATIVE_KEY_TYPED events.
	 * @return the location of the virtual key that was pressed or released. Always returns KEY_LOCATION_UNKNOWN for NATIVE_KEY_TYPED events.
	 */
	public int getKeyLocation() {
		return this.keyLocation;
	}
	
	/**
	 * Returns a String describing the keyCode, such as "HOME", "F1" or "A". These strings can be localized by changing the awt.properties file.
	 *
	 * @param keyCode - The virtual key code generated by this event
	 * @return a string containing a text description for a physical key, identified by its keyCode
	 */
	public static String getKeyText(int keyCode) {
		return KeyEvent.getKeyText(keyCode);
	}
	
	/**
	 * Gets the key modifiers text.
	 *
	 * @param modifiers - the modifier keys down during event (shift, ctrl, alt, meta).
	 * @return the key modifiers text
	 */
	public static String getKeyModifiersText(int modifiers) {
		return KeyEvent.getKeyModifiersText(modifiers);
	}
	

	
	/**
	 * Returns a parameter string identifying this event. This method is useful for event logging and for debugging.
	 * 
	 * @return a string identifying the event and its attributes
	 */
	public String paramString() {
		String param = "";
		
		switch(getId()) {
			case NATIVE_KEY_TYPED:
				param += "NATIVE_KEY_TYPED";
			break;
			
			case NATIVE_KEY_PRESSED:
				param += "NATIVE_KEY_PRESSED";
			break;
			
			case NATIVE_KEY_RELEASED:
				param += "NATIVE_KEY_RELEASED";
			break;
			
			default:
				param += "unknown type";
			break;
		}
		param += ",";
		
		param += "keyCode=" + keyCode + ",";
		param += "keyText=" + getKeyText(keyCode) + ",";
		
		param += "keyChar=";
		switch (keyChar) {
			case KeyEvent.CHAR_UNDEFINED:
				param += Toolkit.getProperty("AWT.undefined", "Undefined") + " keyChar";
			break;
			
			case KeyEvent.VK_BACK_SPACE:
			case KeyEvent.VK_TAB:
			case KeyEvent.VK_ENTER:
			case KeyEvent.VK_CANCEL:
			case KeyEvent.VK_ESCAPE:
			case KeyEvent.VK_DELETE:
				param += getKeyText(keyChar);
			break;
			
			default:
				param += "'" + keyChar + "'";
			break;
		}
		param += ",";
		
		
		if (getModifiers() != 0) {
			param += "modifiers=" + getKeyModifiersText(getModifiers()) + ",";
		}
		
		if (getModifiersEx() != 0) {
			param += "extModifiers=" + getModifiersExText(getModifiersEx()) + ",";
		}

		param += "keyLocation=";
		switch (keyLocation) {
			case KeyEvent.KEY_LOCATION_UNKNOWN:
				param += "KEY_LOCATION_UNKNOWN";
			break;
			
			case KeyEvent.KEY_LOCATION_STANDARD:
				param += "KEY_LOCATION_STANDARD";
			break;
			
			case KeyEvent.KEY_LOCATION_LEFT:
				param += "KEY_LOCATION_LEFT";
			break;
			
			case KeyEvent.KEY_LOCATION_RIGHT:
				param += "KEY_LOCATION_RIGHT";
			break;
			
			case KeyEvent.KEY_LOCATION_NUMPAD:
				param += "KEY_LOCATION_NUMPAD";
			break;
			
			default:
				param += "KEY_LOCATION_UNKNOWN";;
			break;
		}
		param += ",";
		
		param += "rawCode=" + rawCode;
		
		return param;
	}
}
