<?xml version="1.0" encoding="UTF-8"?>

<!--
	JNativeHook: Global keyboard and mouse hooking for Java.
	Copyright (C) 2006-2014 Alexander Barker.  All Rights Received.
	http://code.google.com/p/jnativehook/

	JNativeHook is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published
	by the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	JNativeHook is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="Cross-Compile" default="all" basedir=".">
	<!-- Project Settings -->
	<property file="package.properties" />
	<property environment="env" />
	
	<target name="configure" description="Initialize local build environment.">
		<echo>Initializing local build environment...</echo>
		
		<!-- Set a few static properties for the project. -->
		<property name="ant.build.debug" value="true" />
		<property name="ant.build.javac.compiler" value="modern" />
		<property name="ant.build.javac.source" value="1.5" />
		<property name="ant.build.javac.target" value="1.5" /> 

		<!-- Preform download target checks. -->
		<available file="jnitasks/build.xml" property="project.check.jnitasks.download" />
		<available file="jnativehook/build.xml" property="project.check.jnativehook.download" />

		<!-- Try to locate the rt.jar location for ant.build.javac.bootclasspath -->
		<condition property="ant.build.javac.bootclasspath" value="${env.JDK_HOME}/jre/lib/rt.jar">
			<available file="${env.JDK_HOME}/lib/rt.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${env.JAVA_HOME}/lib/rt.jar">
			<available file="${env.JAVA_HOME}/lib/rt.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${java.home}/lib/rt.jar">
			<available file="${java.home}/lib/rt.jar" type="file" />
		</condition>

		<condition property="ant.build.javac.bootclasspath" value="${env.JDK_HOME}/bundle/Classes/classes.jar">
			<available file="${env.JDK_HOME}/bundle/Classes/classes.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${env.JAVA_HOME}/bundle/Classes/classes.jar">
			<available file="${env.JAVA_HOME}/bundle/Classes/classes.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${java.home}/bundle/Classes/classes.jar">
			<available file="${java.home}/bundle/Classes/classes.jar" type="file" />
		</condition>

		<fail message="Could not determine ant.build.javac.bootclasspath location.  Please set your JDK_HOME / JAVA_HOME environment variable or manually set the ant.build.javac.bootclasspath property to the location of your rt.jar file.">
			<condition>
				<not>
					<or>
						<isset property="ant.build.javac.bootclasspath" />
						<available file="${ant.build.javac.bootclasspath}" type="file" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Java lib location: ${ant.build.javac.bootclasspath}</echo>

		<property name="ant.build.javac.args" value="-bootclasspath ${ant.build.javac.bootclasspath} -Xlint:-options" />
		
		<!-- Try to locate the env path variable -->
		<condition property="native.path" value="">
			<isset property="env.PATH" />
		</condition>
		<condition property="native.path" value="${env.Path}">
			<isset property="env.Path" />
		</condition>
		<condition property="native.path" value="${env.path}">
			<isset property="env.path" />
		</condition>

		<!-- Check for clang before assuming gcc toolchain. -->
		<condition property="ant.build.native.toolchain" value="clang" else="gcc">
			<and>
				<available filepath="${env.PATH};${env.Path};${env.path}" file="clang" type="file" />
				<not>
					<available filepath="${env.PATH};${env.Path};${env.path}" file="gcc" type="file" />
				</not>
			</and>
		</condition>

		<!-- Create property file for the descovered values. -->
		<propertyfile file="package.properties" comment="Auto-generated by ant configure">
			<entry key="ant.build.debug" value="${ant.build.debug}" />
			<entry key="ant.build.javac.compiler" value="${ant.build.javac.compiler}" />
			<entry key="ant.build.javac.source" value="${ant.build.javac.source}" />
			<entry key="ant.build.javac.target" value="${ant.build.javac.target}" />
			<entry key="ant.build.javac.args" value="${ant.build.javac.args}" />
		</propertyfile>
	</target>


	<target name="clean" description="Removes downloaded project files.">
		<delete dir="jnativehook" includeEmptyDirs="true" verbose="true" failonerror="false" />
		
		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="jnitasks" />
			<fileset dir="jnativehook" />
			
			<fileset file="jnativehook-2.0.zip" />
			<fileset file="jnitasks-0.2.zip" />

			<fileset file="package.properties" />
		</delete>
	</target>


	<target name="download-jnitasks" depends="configure" unless="project.check.jnitasks.download" description="Download and initialize the JNITasks library.">
		<echo>Downloading JNITasks source...</echo>
		<mkdir dir="${basedir}/jnitasks" />

		<get src="https://github.com/kwhat/jnitasks/archive/0.2.zip" dest="jnitasks-0.2.zip" verbose="true" />

		<unzip src="jnitasks-0.2.zip" dest="${basedir}/jnitasks">
			<mapper type="glob" from="jnitasks-0.2/*" to="*"/>
		</unzip>
		
		<!-- Fix clock skew. -->
		<touch>
			<fileset dir="jnitasks" includes="**/*" />
		</touch>
	</target>

	<target name="compile-jnitasks" depends="download-jnitasks" description="Build the JNITasks library.">
		<echo>Compiling JNITasks source...</echo>
		<mkdir dir="${basedir}/jnitasks" />

		<ant antfile="${basedir}/jnitasks/build.xml" dir="${basedir}/jnitasks">
			<target name="compile" />
			<target name="jar" />
			
			<!-- We need to override the src and bin locations. -->
			<property name="dir.bin" value="${basedir}/jnitasks/bin" />
			<property name="dir.src" value="${basedir}/jnitasks/src" />
			<property name="dir.jar" value="${basedir}/jnativehook" />

			<!-- Set a few of the configurable properties. -->
			<property name="ant.build.debug" value="${ant.build.debug}" />
			<property name="ant.build.javac.compiler" value="${ant.build.javac.compiler}" />
			<property name="ant.build.javac.source" value="${ant.build.javac.source}" />
			<property name="ant.build.javac.target" value="${ant.build.javac.target}" />
			<property name="ant.build.javac.args" value="${ant.build.javac.args}" />
		</ant>
	</target>


	<target name="download-jnativehook" depends="configure" unless="project.check.jnativehook.download" description="Download and initialize the native library.">
		<echo>Downloading JNativeHook source...</echo>

		<get src="https://github.com/kwhat/jnativehook/archive/2.0.zip" dest="jnativehook-2.0.zip" verbose="true" />
		<unzip src="jnativehook-2.0.zip" dest="jnativehook">
			<mapper type="glob" from="jnativehook-2.0/*" to="*"/>
		</unzip>
		
		<!-- Fix clock skew. -->
		<touch>
			<fileset dir="jnativehook" includes="**/*" />
		</touch>
	</target>


	<target name="-compile-cross" description="Cross compile the native portions of the project.">
		<fail message="You must set ant.build.native.host to cross compile.">
			<condition>
				<not>
					<isset property="ant.build.native.host" />
				</not>
			</condition>
		</fail>
		
		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="jnativehook/bin/libuiohook" />
			<fileset dir="jnativehook/bin/obj" />
			<fileset dir="jnativehook/bin/lib" />
		</delete>
		
		<echo>Compiling for ${ant.build.native.host}...</echo>
		<ant antfile="build.xml" dir="jnativehook" inheritAll="true">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<!-- property file="${ant.build.native.host}.properties" / -->
		</ant>
	</target>


	<target name="compile" depends="compile-jnitasks,download-jnativehook" description="Compiles both Java and C source files.">
		<ant antfile="build.xml" dir="jnativehook" inheritAll="false">
			<target name="compile-java" />
			<target name="bootstrap-libuiohook" />
			
			<property name="ant.build.javac.source" value="${ant.build.javac.source}" />
			<property name="ant.build.javac.target" value="${ant.build.javac.target}" />
			
			<property name="ant.build.javac.args" value="-bootclasspath ${ant.build.javac.bootclasspath}" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="x86_64-w64-mingw32.properties" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="x86_64-pc-linux-gnu.properties" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="x86_64-apple-darwin9.properties" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="i586-w32-mingw32.properties" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="i586-pc-linux-gnu.properties" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="i586-apple-darwin9.properties" />
		</ant>
		
		<ant antfile="package.xml" target="-compile-cross" dir="${basedir}" inheritAll="false">
			<property file="armv6j-hardfloat-linux-gnueabihf.properties" />
		</ant>
	</target>
	
	<target name="package" depends="" description="Creates zip files for distribution.">
		<tstamp>
			<format property="ant.build.revision" pattern="yyyyMMdd" />
		</tstamp>
	
		<ant antfile="build.xml" dir="jnativehook" target="package" inheritAll="false">
			<property name="ant.build.major" value="2" />
			<property name="ant.build.minor" value="0" />
			<property name="ant.build.revision" value="${ant.build.revision}" />
		</ant>
	</target>

	<target name="deploy" depends="javadoc,jar" description="Creates files required for maven deployment.">
		<echo>Creating Maven Archives...</echo>
		<mkdir dir="${dir.maven}" />

		<echo file="${dir.maven}/pom.xml">
<![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.jnativehook</groupId>
	<artifactId>jnativehook</artifactId>
	<version>${ant.project.version}</version>
	<packaging>jar</packaging>
	<name>${ant.project.name}</name>
	<description>Global keyboard and mouse listeners for Java.</description>
	<url>https://github.com/kwhat/jnativehook</url>

	<licenses>
		<license>
			<name>GNU General Public License (GPL), Version 3.0</name>
			<url>https://www.gnu.org/licenses/gpl-3.0.txt</url>
		</license>

		<license>
			<name>GNU Lesser General Public License (LGPL), Version 3.0</name>
			<url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>
		</license>
	</licenses>

	<developers>
		<developer>
			<name>Alex Barker</name>
			<email>alex@1stleg.com</email>
			<organization>Personal</organization>
			<organizationUrl>https://github.com/kwhat/</organizationUrl>
		</developer>
	</developers>

	<scm>
		<connection>scm:git:git@github.com:kwhat/jnativehook.git</connection>
		<developerConnection>scm:git:git@github.com:kwhat/jnativehook.git</developerConnection>
		<url>git@github.com:kwhat/jnativehook.git</url>
	</scm>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jnitasks</groupId>
			<artifactId>jnitasks</artifactId>
			<version>0.2</version>
			<scope>compile</scope>
		</dependency>
	</dependencies>
</project>
]]>
		</echo>

		<property name="jar.maven.name" value="${ant.project.name}-${ant.build.major}.${ant.build.minor}.${ant.build.revision}" />

		<echo>Creating ${jar.maven.base}.jar...</echo>
		<copy file="${dir.jar}/${ant.project.name}.jar" tofile="${dir.maven}/${jar.maven.name}.jar"/>

		<echo>Creating ${jar.maven.base}-sources.jar...</echo>
		<jar jarfile="${dir.maven}/${jar.maven.name}-sources.jar" basedir="${dir.src}" update="true" compress="true" level="9">
			<include name="**/*" />
		</jar>

		<echo>Creating ${jar.base.name}-javadoc.jar...</echo>
		<jar jarfile="${dir.maven}/${jar.maven.name}-javadoc.jar" basedir="${dir.doc}" update="true" compress="true" level="9">
			<include name="**/*" />
		</jar>


		<echo>Creating GPG signature for jars...</echo>
		<exec executable="gpg2" failonerror="true">
			<arg value="-ab" />
			<arg value="${dir.maven}/${jar.maven.name}.jar" />
		</exec>

		<exec executable="gpg2" failonerror="true">
			<arg value="-ab" />
			<arg value="${dir.maven}/${jar.maven.name}-sources.jar" />
		</exec>

		<exec executable="gpg2" failonerror="true">
			<arg value="-ab" />
			<arg value="${dir.maven}/${jar.maven.name}-javadoc.jar" />
		</exec>

		<echo>Creating GPG signature for jars...</echo>
		<exec executable="mvn" failonerror="true">
			<arg value="-ab" />
			<arg value="${dir.maven}/${jar.maven.name}-javadoc.jar" />
		</exec>

		<!-- Unfortunately we cannot use maven to sign because Gentoo does not support maven.  -->
		<!-- mvn>
			<arg value="org.apache.maven.plugins:maven-gpg-plugin:1.3:sign-and-deploy-file" />
			<arg value="-Durl=file://${dir.maven}" />
			<arg value="-DrepositoryId=local" />
			<arg value="-Darguments=&quot;gpg.passphrase=jnativehook-debug&quot;" />
			<arg value="-DpomFile=pom.xml" />
			<arg value="-Dfile=${dir.maven}/${jar.maven.name}.jar" />
			<arg value="-Pgpg" />
		</mvn -->
	</target>
	
	<target name="all" depends="compile,package" description="Compile all source files and create the jar library.">
	</target>
</project>
