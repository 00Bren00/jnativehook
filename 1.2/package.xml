<?xml version="1.0" encoding="UTF-8"?>

<!--
	JNativeHook: Global keyboard and mouse hooking for Java.
	Copyright (C) 2006-2014 Alexander Barker.  All Rights Received.
	http://code.google.com/p/jnativehook/

	JNativeHook is free software: you can redistribute it and/or modify
	it under the terms of the GNU Lesser General Public License as published
	by the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	JNativeHook is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU Lesser General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<project name="Cross-Compile" default="all" basedir=".">
	<!-- Project Settings -->
	<property file="package.properties" />
	<property environment="env" />

	<!-- Path Settings -->
	<property name="dir.project" value="${basedir}/jnativehook" />
	
	
	<target name="configure" description="Initialize local build environment.">
		<echo>Initializing local build environment...</echo>
		
		<!-- Set a few static properties for the project. -->
		<property name="ant.build.debug" value="true" />
		<property name="ant.build.javac.compiler" value="modern" />
		<property name="ant.build.javac.source" value="1.5" />
		<property name="ant.build.javac.target" value="1.5" /> 
		
		
		<!-- Try to locate the rt.jar location for ant.build.javac.bootclasspath -->
		<condition property="ant.build.javac.bootclasspath" value="${env.JDK_HOME}/jre/lib/rt.jar">
			<available file="${env.JDK_HOME}/lib/rt.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${env.JAVA_HOME}/lib/rt.jar">
			<available file="${env.JAVA_HOME}/lib/rt.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${java.home}/lib/rt.jar">
			<available file="${java.home}/lib/rt.jar" type="file" />
		</condition>

		<condition property="ant.build.javac.bootclasspath" value="${env.JDK_HOME}/bundle/Classes/classes.jar">
			<available file="${env.JDK_HOME}/bundle/Classes/classes.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${env.JAVA_HOME}/bundle/Classes/classes.jar">
			<available file="${env.JAVA_HOME}/bundle/Classes/classes.jar" type="dir" />
		</condition>
		<condition property="ant.build.javac.bootclasspath" value="${java.home}/bundle/Classes/classes.jar">
			<available file="${java.home}/bundle/Classes/classes.jar" type="file" />
		</condition>

		<fail message="Could not determine ant.build.javac.bootclasspath location.  Please set your JDK_HOME / JAVA_HOME environment variable or manually set the ant.build.javac.bootclasspath property to the location of your rt.jar file.">
			<condition>
				<not>
					<or>
						<isset property="ant.build.javac.bootclasspath" />
						<available file="${ant.build.javac.bootclasspath}" type="file" />
					</or>
				</not>
			</condition>
		</fail>
		<echo level="info">Found Java lib location: ${ant.build.javac.bootclasspath}</echo>

		<property name="ant.build.javac.args" value="-bootclasspath ${ant.build.javac.bootclasspath} -Xlint:-options" />
		
		<!-- Try to locate the env path variable -->
		<condition property="native.path" value="">
			<isset property="env.PATH" />
		</condition>
		<condition property="native.path" value="${env.Path}">
			<isset property="env.Path" />
		</condition>
		<condition property="native.path" value="${env.path}">
			<isset property="env.path" />
		</condition>

		<!-- Check for clang before assuming gcc toolchain. -->
		<condition property="ant.build.native.toolchain" value="clang" else="gcc">
			<and>
				<available filepath="${env.PATH};${env.Path};${env.path}" file="clang" type="file" />
				<not>
					<available filepath="${env.PATH};${env.Path};${env.path}" file="gcc" type="file" />
				</not>
			</and>
		</condition>

		<!-- Create property file for the descovered values. -->
		<propertyfile file="package.properties" comment="Auto-generated by ant configure">
			<entry key="ant.build.debug" value="${ant.build.debug}" />
			<entry key="ant.build.javac.compiler" value="${ant.build.javac.compiler}" />
			<entry key="ant.build.javac.source" value="${ant.build.javac.source}" />
			<entry key="ant.build.javac.target" value="${ant.build.javac.target}" />
			<entry key="ant.build.javac.args" value="${ant.build.javac.args}" />
		</propertyfile>
	</target>

	<target name="clean" description="Removes generated bytecode and object files.">
		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="dir.project" includes="**/*" />
		</delete>
	</target>

	<target name="download-jnitasks" depends="init" unless="project.check.jnitasks.download" description="Download and initialize the native library.">
		<echo>Downloading JNITasks source...</echo>
		<mkdir dir="${dir.src}/jnitasks" />

		<get src="https://github.com/kwhat/jnitasks/archive/master.zip" dest="${dir.bin}/jnitasks-master.zip" verbose="true" />

		<unzip src="${dir.bin}/jnitasks-master.zip" dest="${dir.src}/jnitasks">
			<mapper type="glob" from="jnitasks-master/*" to="*"/>
		</unzip>
	</target>


	<target name="compile-jnitasks" depends="download-jnitasks" description="Download and initialize the native library.">
		<echo>Compiling JNITasks source...</echo>

		<ant antfile="${dir.src}/jnitasks/build.xml" dir="${dir.src}/jnitasks">
			<target name="compile" />
			<target name="jar" />
			
			<!-- We need to override the src and bin locations. -->
			<property name="dir.bin" value="${dir.bin}/jnitasks" />
			<property name="dir.src" value="${dir.src}/jnitasks/src" />

			<!-- Set a few of the configurable properties. -->
			<property name="ant.build.debug" value="${ant.build.debug}" />
			<property name="ant.build.javac.compiler" value="${ant.build.javac.compiler}" />
			<property name="ant.build.javac.source" value="${ant.build.javac.source}" />
			<property name="ant.build.javac.target" value="${ant.build.javac.target}" />
			<property name="ant.build.javac.args" value="${ant.build.javac.args}" />
		</ant>

		<!-- typedef file="${dir.src}/jnitasks/src/org/jnitasks/antlib.xml" classpath="${dir.bin}/jnitasks" /-->
		<copy overwrite="true" todir="${dir.project}/jar">
			<fileset dir="???" includes="**/*" />
		</copy>
	</target>

	<target name="download-jnativehook" depends="configure" unless="project.check.jnativehook.download" description="Download and initialize the native library.">
		<echo>Downloading JNativeHook source...</echo>

		<get src="https://github.com/kwhat/jnativehook/archive/master.zip" dest="jnativehook-master.zip" verbose="true" />
		<unzip src="jnativehook-master.zip" dest="${dir.project}">
			<mapper type="glob" from="jnativehook-master/*" to="*"/>
		</unzip>
	</target>

	<target name="compile-independent" depends="download-jnativehook"  description="Compile platform independent items.">
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}" inheritAll="false">
			<target name="compile-jnitasks" />
			<target name="compile-java" />
			<target name="bootstrap-libuiohook" />
			
			<property name="ant.build.javac.source" value="${ant.build.javac.source}" />
			<property name="ant.build.javac.target" value="${ant.build.javac.target}" />
			
			<property name="ant.build.javac.args" value="-bootclasspath ${ant.build.javac.bootclasspath}" />
		</ant>
	</target>


	<target name="compile-x86_64-w64-mingw32" description="Compiles Windows x86_64 binaries.">
		<echo>Compiling x86_64-w64-mingw32 source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-x86_64-w64-mingw32" />
			
			<property file="x86_64-w64-mingw32.properties" />
		</ant>
	</target>
	
	<target name="compile-x86_64-pc-linux-gnu" description="Compiles Linux x86_64 binaries.">
		<echo>Compiling x86_64-pc-linux-gnu source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-x86_64-pc-linux-gnu" />
			
			<property file="x86_64-pc-linux-gnu.properties" />
		</ant>
	</target>

	<target name="compile-x86_64-apple-darwin9" description="Compiles Darwin x86_64 binaries.">
		<echo>Compiling x86_64-apple-darwin9 source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-x86_64-apple-darwin9" />
			
			<property file="x86_64-apple-darwin9.properties" />
		</ant>
	</target>
	
	<target name="compile-i586-w32-mingw32" description="Compiles Windows i586 binaries.">
		<echo>Compiling i586-w32-mingw32 source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-i586-w32-mingw32" />
			
			<property file="i586-w32-mingw32.properties" />
		</ant>
	</target>
	
	<target name="compile-i586-pc-linux-gnu" description="Compiles Linux i586 binaries.">
		<echo>Compiling i586-pc-linux-gnu source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}" target="compile-jni">
			<property name="dir.bin" value="${dir.bin}/compile-i586-pc-linux-gnu" />
			
			<property file="i586-pc-linux-gnu.properties" />
		</ant>
	</target>

	<target name="compile-i586-apple-darwin9" description="Compiles Darwin i586 binaries.">
		<echo>Compiling i586-apple-darwin9 source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-i586-apple-darwin9" />
			
			<property file="i586-apple-darwin9.properties" />
		</ant>
	</target>
	
	<target name="compile-armv6j-hardfloat-linux-gnueabihf" description="Compiles Linux armv6j binaries.">
		<echo>Compiling armv6j-hardfloat-linux-gnueabihf source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-armv6j-hardfloat-linux-gnueabihf" />
			
			<property file="armv6j-hardfloat-linux-gnueabihf.properties" />
		</ant>
	</target>
	
	<target name="compile-armv7a-hardfloat-linux-gnueabihf" description="Compiles Linux armv6j binaries.">
		<echo>Compiling armv6j-hardfloat-linux-gnueabihf source...</echo>
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}">
			<target name="compile-libuiohook" />
			<target name="compile-jni" />
			
			<property name="dir.bin" value="${dir.bin}/compile-armv7a-hardfloat-linux-gnueabihf" />
			
			<property file="armv7a-hardfloat-linux-gnueabihf.properties" />
		</ant>
	</target>
	
	<target name="compile-all" depends="compile-independent,compile-x86_64-w64-mingw32" description="Compiles both Java and C source files.">
	</target>
	
	<target name="package" depends="" description="Creates zip files for distribution.">
		<ant antfile="${dir.project}/build.xml" dir="${dir.project}" target="package">
		</ant>
	</target>

	<target name="all" depends="compile-all,package" description="Compile all source files and create the jar library.">
	</target>
</project>
